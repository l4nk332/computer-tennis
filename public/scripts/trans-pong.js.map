{"version":3,"sources":["game.js"],"names":[],"mappings":"AAAA;;;;AAGA,SAAS,UAAT,GAAsB;AACpB,MAAI,OAAO,SAAS,cAAT,CAAwB,MAAxB,CAAX;AACA,MAAI,WAAW,SAAS,aAAT,CAAuB,GAAvB,CAAf;AACA,MAAI,gBAAgB,SAAS,aAAT,CAAuB,KAAvB,CAApB;AACA,gBAAc,YAAd,CAA2B,IAA3B,EAAiC,gBAAjC;AACA,OAAK,YAAL,CAAkB,aAAlB,EAAiC,QAAjC;;AAEA,gBAAc,SAAd,GAA0B,4oCAqCpB,IArCoB,EAA1B;;AAuCA,mBAAiB,OAAjB,EAA0B,UAAS,KAAT,EAAgB;AACxC,QAAI,OAAO,MAAM,MAAN,CAAa,YAAb,CAA0B,MAA1B,CAAX;AACA,QAAI,KAAK,MAAM,MAAN,CAAa,YAAb,CAA0B,IAA1B,CAAT;AACA,QAAI,SAAS,WAAT,IAAwB,OAAO,QAAnC,EAA6C;AAC3C,UAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,UAAI,eAAe,SAAS,gBAAT,CAA0B,qBAA1B,CAAnB;AACA,aAAO,QAAP,GAAkB,IAAlB;AACA,mBAAa,CAAb,EAAgB,QAAhB,GAA2B,IAA3B;AACA,mBAAa,CAAb,EAAgB,QAAhB,GAA2B,IAA3B;AACD,KAND,MAMO,IAAI,SAAS,WAAT,IAAwB,OAAO,QAAnC,EAA6C;AAClD,UAAI,UAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,UAAI,gBAAe,SAAS,gBAAT,CAA0B,qBAA1B,CAAnB;AACA,cAAO,QAAP,GAAkB,KAAlB;AACA,oBAAa,CAAb,EAAgB,QAAhB,GAA2B,KAA3B;AACA,oBAAa,CAAb,EAAgB,QAAhB,GAA2B,KAA3B;AACD;AACF,GAhBD;AAiBD;;;AAGD,IAAI,oBAAJ;;AAEA,IAAI,eAAe,EAAC,IAAI,QAAL,EAAe,IAAI,YAAnB,EAAiC,IAAI,SAArC,EAAgD,IAAI,UAApD,EAAgE,IAAI,QAApE,EAA8E,IAAI,SAAlF,EAA6F,IAAI,UAAjG,EAA6G,IAAI,YAAjH,EAAnB;;AAEA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,MAAI,UAAU,EAAd;AACA,WAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC3B,QAAI,MAAM,cAAN,CAAqB,MAAM,OAA3B,CAAJ,EAAyC;AACrC,UAAI,OAAQ,MAAM,IAAN,IAAc,SAA1B;AACA,cAAQ,MAAM,MAAM,OAAZ,CAAR,IAAgC,IAAhC;AACA,YAAM,cAAN;AACH;AACG;AACD,mBAAiB,SAAjB,EAA4B,OAA5B;AACA,mBAAiB,OAAjB,EAA0B,OAA1B;AACA,SAAO,OAAP;AACH;;AAED,IAAI,WAAW,UAAU,YAAV,CAAf;;;;;;;;;;;;AAaA,IAAI,QAAQ,SAAR,KAAQ,GAA0D;AAAA,MAAjD,KAAiD,yDAA3C,GAA2C;AAAA,MAAtC,MAAsC,yDAA/B,GAA+B;AAAA,MAA1B,QAA0B,yDAAjB,EAAC,KAAK,QAAN,EAAiB;;AAClE,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,KAAL,GAAa,EAAb;AACA,OAAK,WAAL,GAAmB,CAAnB;AACA,OAAK,WAAL,GAAmB,SAAS,GAA5B;AACH,CAND;;;;;;;AAaA,MAAM,SAAN,CAAgB,iBAAhB,GAAoC,YAAW;AAC3C,OAAK,MAAL,GAAc,EAAd;AACA,MAAI,KAAK,WAAL,KAAqB,QAArB,IAAiC,KAAK,WAAL,KAAqB,OAA1D,EAAmE;AACtE,SAAK,IAAI,MAAM,CAAf,EAAkB,OAAO,CAAzB,EAA4B,KAA5B,EAAmC;AAC/B,UAAI,WAAW,IAAI,KAAJ,0BAAiC,GAAjC,UAAf;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,QAAjB;AACH;AACG,GALD,MAKO,IAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAC9C,QAAI,YAAW,IAAI,KAAJ,6BAAf;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB;AACI,GAHM,MAGA,IAAI,KAAK,WAAL,KAAqB,WAAzB,EAAsC;AAChD,QAAI,aAAW,IAAI,KAAJ,6BAAf;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,UAAjB;AACI;AACJ,CAdD;;;;;;;AAqBA,MAAM,SAAN,CAAgB,SAAhB,GAA4B,YAAW;AACnC,MAAI,eAAe,KAAK,KAAL,CAAW,KAAK,MAAL,KAAc,KAAK,MAAL,CAAY,MAArC,CAAnB;AACA,MAAI,kBAAkB,KAAK,MAAL,CAAY,YAAZ,CAAtB;;AAEA,OAAK,WAAL,IAAqB,KAAK,WAAL,GAAmB,CAApB,GAAyB,GAAzB,GAA+B,CAAnD;AACA,kBAAgB,MAAhB,GAAyB,KAAK,WAA9B;AACA,kBAAgB,IAAhB;AACH,CAPD;;;;;;;;;;;;AAmBA,IAAI,OAAO,SAAP,IAAO,CAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,QAArC,EAA+C;AACtD,OAAK,KAAL,GAAa;AAChB,eAAW,CADK;AAEhB,eAAW;AAFK,GAAb;AAIA,OAAK,aAAL,GAAqB;AACxB,eAAW,OADa;AAExB,eAAW,OAFa;AAGxB,WAAO,CAAC,QAAD;AAHiB,GAArB;AAKA,MAAI,SAAS,GAAT,KAAiB,QAAjB,IAA6B,SAAS,GAAT,KAAiB,OAAlD,EAA2D;AAC9D,SAAK,MAAL,GAAc;AACV,aAAO,IAAI,KAAJ,CAAU,wBAAV,CADG;AAEV,aAAO,IAAI,KAAJ,CAAU,yBAAV,CAFG;AAGV,aAAO,IAAI,KAAJ,CAAU,2BAAV,CAHG;AAIV,aAAO,IAAI,KAAJ,CAAU,2BAAV;AAJG,KAAd;AAMI,GAPD,MAOO,IAAI,SAAS,GAAT,KAAiB,SAArB,EAAgC;AAC1C,SAAK,MAAL,GAAc;AACV,aAAO,IAAI,KAAJ,CAAU,wBAAV,CADG;AAEV,aAAO,IAAI,KAAJ,CAAU,yBAAV,CAFG;AAGV,aAAO,IAAI,KAAJ,CAAU,2BAAV,CAHG;AAIV,aAAO,IAAI,KAAJ,CAAU,2BAAV;AAJG,KAAd;AAMI,GAPM,MAOA,IAAI,SAAS,GAAT,KAAiB,WAArB,EAAkC;AAC5C,SAAK,MAAL,GAAc;AACV,aAAO,IAAI,KAAJ,CAAU,wBAAV,CADG;AAEV,aAAO,IAAI,KAAJ,CAAU,yBAAV,CAFG;AAGV,aAAO,IAAI,KAAJ,CAAU,2BAAV,CAHG;AAIV,aAAO,IAAI,KAAJ,CAAU,2BAAV;AAJG,KAAd;AAMI;AACD,OAAK,QAAL,GAAgB,KAAhB;AACA,OAAK,MAAL,GAAc,KAAd;AACA,OAAK,QAAL,GAAgB;AACnB,UAAM,SAAS,IADI;AAEnB,SAAK,SAAS,GAFK;AAGnB,WAAO,SAAS;AAHG,GAAhB;AAKA,OAAK,SAAL,GAAiB,IAAI,IAAJ,GAAW,OAAX,EAAjB;AACA,OAAK,QAAL,GAAgB,CAAhB;AACA,OAAK,QAAL,GAAgB,CAAhB;AACH,CA1CD;;AA4CA,KAAK,SAAL,CAAe,WAAf,GAA6B,YAAW;AACpC,MAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;AACA,MAAI,UAAU,MAAM,KAAK,SAAzB;AACA,MAAI,eAAe,SAAU,UAAU,IAAX,GAAiB,GAA1B,CAAnB;AACA,MAAI,UAAU,SAAU,UAAQ,IAAT,GAAiB,EAA1B,CAAd;AACA,MAAI,UAAU,SAAU,WAAS,OAAK,EAAd,CAAD,GAAsB,EAA/B,CAAd;AACA,MAAI,QAAQ,SAAU,WAAS,OAAK,EAAL,GAAQ,EAAjB,CAAD,GAAyB,EAAlC,CAAZ;;AAEA,UAAS,QAAQ,EAAT,GAAe,MAAM,KAArB,GAA6B,KAArC;AACA,YAAW,UAAU,EAAX,GAAiB,MAAM,OAAvB,GAAiC,OAA3C;AACA,YAAW,UAAU,EAAX,GAAiB,MAAM,OAAvB,GAAiC,OAA3C;;AAEA,SAAU,KAAV,SAAmB,OAAnB,SAA8B,OAA9B,SAAyC,YAAzC;AACH,CAbD;;AAeA,KAAK,SAAL,CAAe,aAAf,GAA+B,YAAW;AACtC,MAAI,YAAY,KAAK,aAAL,CAAmB,KAAnB,CAAyB,CAAzB,EAA4B,QAA5B,CAAqC,CAArD;AACA,MAAI,YAAY,KAAK,aAAL,CAAmB,KAAnB,CAAyB,CAAzB,EAA4B,QAA5B,CAAqC,CAArD;AACA,MAAI,qBAAqB,KAAK,GAAL,CAAS,SAAT,EAAoB,CAApB,IAAyB,KAAK,GAAL,CAAS,SAAT,EAAoB,CAApB,CAAlD;AACA,MAAI,qBAAqB,KAAK,QAA9B,EAAwC;AAC3C,SAAK,QAAL,GAAgB,kBAAhB;AACI;AACJ,CAPD;;AASA,KAAK,SAAL,CAAe,gBAAf,GAAkC,YAAW;AACzC,MAAI,mBAAmB,KAAK,aAAL,CAAmB,SAAnB,CAA6B,cAApD;AACA,MAAI,mBAAmB,KAAK,aAAL,CAAmB,SAAnB,CAA6B,cAApD;AACA,MAAI,kBAAkB,KAAK,KAAL,CAAW,mBAAmB,mBAAmB,CAAjD,CAAtB;AACA,MAAI,kBAAkB,KAAK,QAA3B,EAAqC;AACxC,SAAK,QAAL,GAAgB,eAAhB;AACI;AACJ,CAPD;;;;;;;;;;;;;;;;AAuBA,KAAK,SAAL,CAAe,UAAf,GAA4B,UAAS,KAAT,EAAgB;;AAExC,OAAK,UAAL,CAAgB,KAAhB;;AAEA,MAAI,YAAY,SAAS,cAAT,CAAwB,WAAxB,CAAhB;AACA,MAAI,gBAAgB,SAAS,aAAT,CAAuB,KAAvB,CAApB;AACA,gBAAc,KAAd,CAAoB,KAApB,GAA4B,MAAM,KAAN,GAAc,IAA1C;AACA,gBAAc,KAAd,CAAoB,MAApB,GAA6B,MAAM,MAAN,GAAe,IAA5C;AACA,gBAAc,YAAd,CAA2B,IAA3B,EAAiC,gBAAjC;AACA,MAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,QAA3B,EAAqC;AACxC,cAAU,YAAV,CAAuB,OAAvB,EAAgC,KAAK,QAAL,CAAc,KAAd,GAAsB,QAAtD;AACA,kBAAc,YAAd,CAA2B,OAA3B,EAAoC,KAAK,QAAL,CAAc,KAAd,GAAsB,QAA1D;AACI,GAHD,MAGO,IAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,SAA3B,EAAsC;AAChD,cAAU,YAAV,CAAuB,OAAvB,EAAgC,eAAhC;AACA,kBAAc,YAAd,CAA2B,OAA3B,EAAoC,eAApC;AACI,GAHM,MAGA,IAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,WAA3B,EAAuC;AACjD,cAAU,YAAV,CAAuB,OAAvB,EAAgC,iBAAhC;AACA,kBAAc,YAAd,CAA2B,OAA3B,EAAoC,iBAApC;AACI;AACD,YAAU,WAAV,CAAsB,aAAtB;AACA,QAAM,KAAN,CAAY,SAAZ,GAAwB,KAAK,aAAL,CAAmB,SAA3C;AACA,QAAM,KAAN,CAAY,SAAZ,GAAwB,KAAK,aAAL,CAAmB,SAA3C;AACA,QAAM,KAAN,CAAY,KAAZ,GAAoB,EAApB;AACA,QAAM,KAAN,CAAY,KAAZ,CAAkB,CAAlB,IAAsB,KAAK,aAAL,CAAmB,KAAnB,CAAyB,CAAzB,CAAtB;;AAEA,MAAI,WAAW,SAAS,aAAT,CAAuB,QAAvB,CAAf;AACA,MAAI,cAAc,SAAS,UAAT,CAAoB,IAApB,CAAlB;AACA,WAAS,KAAT,GAAiB,MAAM,KAAvB;AACA,WAAS,MAAT,GAAkB,MAAM,MAAxB;AACA,WAAS,KAAT,CAAe,QAAf,GAA0B,UAA1B;AACA,WAAS,KAAT,CAAe,MAAf,GAAwB,CAAxB;AACA,gBAAc,WAAd,CAA0B,QAA1B;;;AAGA,cAAY,IAAZ;AACA,cAAY,WAAZ,GAA0B,OAA1B;AACA,cAAY,SAAZ,GAAwB,CAAxB;AACA,cAAY,WAAZ,CAAwB,CAAC,CAAD,EAAI,EAAJ,CAAxB;AACA,cAAY,SAAZ;AACA,cAAY,MAAZ,CAAmB,CAAnB,EAAuB,SAAS,MAAT,GAAgB,CAAvC;AACA,cAAY,MAAZ,CAAmB,SAAS,KAA5B,EAAoC,SAAS,MAAT,GAAgB,CAApD;AACA,cAAY,MAAZ;AACA,cAAY,OAAZ;;;AAGA,MAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,MAAI,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAV;AACA,SAAO,KAAP,GAAe,MAAM,KAArB;AACA,SAAO,MAAP,GAAgB,MAAM,MAAtB;AACA,SAAO,KAAP,CAAa,QAAb,GAAwB,UAAxB;AACA,SAAO,KAAP,CAAa,MAAb,GAAsB,CAAtB;AACA,gBAAc,WAAd,CAA0B,MAA1B;;AAEA,MAAI,SAAJ,GAAgB,KAAK,aAAL,CAAmB,KAAnB,CAAyB,CAAzB,EAA4B,MAA5B,CAAmC,CAAnC,CAAhB;;AAGA,WAAS,UAAT,GAAsB;AACzB,QAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,MAAM,KAA1B,EAAiC,MAAM,MAAvC;AACI;;;AAGD,MAAI,OAAO,IAAX;;AAEA,WAAS,MAAT,GAAkB;AACjB;;AAEA,QAAI,SAAS,MAAT,IAAmB,SAAS,QAAhC,EAA0C;;AAEtC,YAAM,KAAN,CAAY,SAAZ,CAAsB,QAAtB,CAA+B,EAA/B;AACH,KAHD,MAGO,IAAI,SAAS,OAAT,IAAoB,SAAS,QAAjC,EAA2C;;AAE9C,YAAM,KAAN,CAAY,SAAZ,CAAsB,SAAtB,CAAgC,EAAhC;AACH,KAHM,MAGA,IAAI,SAAS,MAAb,EAAqB;AACxB,YAAM,KAAN,CAAY,SAAZ,CAAsB,QAAtB,CAA+B,EAA/B;AACH,KAFM,MAEA,IAAI,SAAS,OAAb,EAAsB;AACzB,YAAM,KAAN,CAAY,SAAZ,CAAsB,SAAtB,CAAgC,EAAhC;AACH;;AAED,QAAI,SAAS,MAAT,IAAmB,SAAS,QAAhC,EAA0C;;AAEtC,YAAM,KAAN,CAAY,SAAZ,CAAsB,QAAtB,CAA+B,EAA/B;AACH,KAHD,MAGO,IAAI,SAAS,OAAT,IAAoB,SAAS,QAAjC,EAA2C;;AAE9C,YAAM,KAAN,CAAY,SAAZ,CAAsB,SAAtB,CAAgC,EAAhC;AACH,KAHM,MAGA,IAAI,SAAS,MAAb,EAAqB;AACxB,YAAM,KAAN,CAAY,SAAZ,CAAsB,QAAtB,CAA+B,EAA/B;AACH,KAFM,MAEA,IAAI,SAAS,OAAb,EAAsB;AACzB,YAAM,KAAN,CAAY,SAAZ,CAAsB,SAAtB,CAAgC,EAAhC;AACH;;AAED,UAAM,KAAN,CAAY,SAAZ,CAAsB,IAAtB,CAA2B,GAA3B;;AAEA,UAAM,KAAN,CAAY,SAAZ,CAAsB,IAAtB,CAA2B,GAA3B;;;;;AAKA,UAAM,KAAN,CAAY,KAAZ,CAAkB,OAAlB,CAA0B,UAAC,WAAD,EAAiB;;AAEvC,UAAI,iBAAiB,YAAY,IAAZ,CAAiB,KAAjB,CAArB;AACA,UAAI,cAAJ,EAAoB;AACnB,YAAI,eAAe,WAAnB,EAAgC;;AAE5B,eAAK,gBAAL;AACA,eAAK,QAAL,CAAc,eAAe,WAA7B;;;AAGA,cAAI,cAAc,eAAe,WAAjC;AACA,cAAI,aAAc,gBAAgB,WAAjB,GAAgC,WAAhC,GAA8C,WAA/D;;AAEA,eAAK,aAAL,CAAmB,WAAnB,EAAgC,YAAhC;AACA,eAAK,aAAL,CAAmB,UAAnB,EAA+B,YAA/B;;AAEA,cAAI,KAAK,aAAL,CAAmB,UAAnB,EAA+B,KAA/B,IAAwC,CAA5C,EAA+C;AAC9C,iBAAK,aAAL,CAAmB,WAAnB;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;AACA,iBAAK,QAAL,GAAgB,IAAhB;AACG,mBAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAS,KAAT,EAAgB;AACjD,oBAAM,cAAN;;AAED,aAHD;AAIH;AACA;AACJ;AACD,YAAI,eAAe,MAAnB,EAA2B;;AAEvB,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;;AAEA,eAAK,aAAL;AACA,eAAK,UAAL,CAAgB,KAAhB,EAAuB,WAAvB;;AAEA,eAAK,aAAL,CAAmB,SAAnB,CAA6B,WAA7B,GAA2C,CAA3C;AACA,eAAK,aAAL,CAAmB,SAAnB,CAA6B,WAA7B,GAA2C,CAA3C;AACA,eAAK,aAAL,CAAmB,SAAnB,CAA6B,mBAA7B;AACA,eAAK,aAAL,CAAmB,SAAnB,CAA6B,mBAA7B;AACA,qBAAW,YAAW;AACrB,gBAAI,cAAe,KAAK,MAAL,KAAgB,GAAjB,GAAwB,CAAC,CAAzB,GAA6B,CAA/C;AACA,gBAAI,cAAe,eAAe,WAAf,KAA+B,WAAhC,GAA+C,CAAC,CAAhD,GAAoD,CAAtE;AACA,gBAAI,UAAU,IAAI,IAAJ,CAAS,KAAT,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,IAAE,WAAxB,EAAqC,IAAE,WAAvC,CAAd;AACA,iBAAK,OAAL,CAAa,KAAb,EAAoB,OAApB;;AAEA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;AACA,WAPD,EAOG,IAPH;AAQH;AACA,OA5CF,MA6CO;AACH,oBAAY,IAAZ,CAAiB,GAAjB;AACD;AACL,KAnDF;;AAqDC,QAAI,KAAK,QAAT,EAAmB;AACf,2BAAqB,WAArB;AACA,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAS,KAAT,EAAgB;AACjD,cAAM,cAAN;AACA,YAAI,MAAM,OAAN,IAAiB,IAArB,EAA2B;AACzB,eAAK,YAAL;AACD;AACF,OALD;AAMA;AACH,KATD,MASO;AACH,oBAAc,sBAAsB,MAAtB,CAAd;AACH;AACF;;AAEC,SAAO,gBAAP,CAAwB,OAAxB,EAAiC,UAAS,KAAT,EAAgB;AAC/C,QAAI,MAAM,OAAN,IAAiB,IAArB,EAA2B;AACzB,UAAI,eAAe,KAAK,MAAL,KAAgB,KAAnC,EAA0C;AACxC,aAAK,WAAL,CAAiB,WAAjB;AACA,OAFF,MAGM,IAAI,KAAK,MAAL,KAAgB,IAApB,EAA0B;AAC7B,aAAK,WAAL,CAAiB,IAAjB,EAAuB,MAAvB;AACA;AACJ;AACF,GATD;;AAWA;AACL,CAhLD;;;;;;AAsLA,KAAK,SAAL,CAAe,YAAf,GAA8B,YAAW;AACvC,MAAI,ubAQgC,KAAK,QARrC,uNAYgC,KAAK,WAAL,EAZhC,6MAgBgC,KAAK,QAhBrC,sOAAJ;AAuBA,WAAS,IAAT,CAAc,SAAd,GAA0B,SAA1B;;AAEA,SAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAS,KAAT,EAAgB;AACjD,UAAM,cAAN;AACA,QAAI,MAAM,OAAN,IAAiB,IAArB,EAA2B;AACzB,aAAO,QAAP,GAAkB,GAAlB;AACD;AACF,GALD;AAMD,CAhCD;;;;;;AAsCA,KAAK,SAAL,CAAe,QAAf,GAA0B,UAAS,MAAT,EAAiB;AACvC,MAAI,WAAW,WAAX,IAA0B,WAAW,WAAzC,EAAsD;AACzD,UAAM,IAAI,KAAJ,CAAU,6DAAV,CAAN;AACI;AACD,OAAK,KAAL,CAAW,MAAX,KAAsB,CAAtB;AACH,CALD;;;;;;;;;AAcA,KAAK,SAAL,CAAe,OAAf,GAAyB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC3C,OAAK,aAAL,CAAmB,KAAnB,CAAyB,IAAzB,CAA8B,IAA9B;AACA,QAAM,KAAN,CAAY,KAAZ,CAAkB,IAAlB,CAAuB,IAAvB;AACH,CAHD;;;;;;;AAUA,KAAK,SAAL,CAAe,UAAf,GAA4B,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC9C,OAAK,aAAL,CAAmB,KAAnB,GAA2B,KAAK,aAAL,CAAmB,KAAnB,CAAyB,MAAzB,CAAgC,UAAC,WAAD,EAAiB;AAC/E,WAAQ,gBAAgB,IAAxB;AACI,GAF0B,CAA3B;AAGA,QAAM,KAAN,CAAY,KAAZ,GAAoB,MAAM,KAAN,CAAY,KAAZ,CAAkB,MAAlB,CAAyB,UAAC,cAAD,EAAoB;AACpE,WAAQ,mBAAmB,IAA3B;AACI,GAFmB,CAApB;AAGH,CAPD;;;;;;;;AAeA,KAAK,SAAL,CAAe,aAAf,GAA+B,UAAS,MAAT,EAAiB;AAC9C,MAAI,SAAU,WAAW,WAAZ,GAA2B,KAA3B,GAAmC,KAAhD;;AAEA,MAAI,YAAY,SAAS,cAAT,CAAwB,WAAxB,CAAhB;AACA,YAAU,SAAV,GAAsB,EAAtB;;AAEA,MAAI,aAAa,SAAS,aAAT,CAAuB,KAAvB,CAAjB;AACA,aAAW,YAAX,CAAwB,OAAxB,EAAiC,aAAjC;AACA,MAAI,YAAY,SAAS,aAAT,CAAuB,KAAvB,CAAhB;AACA,YAAU,YAAV,CAAuB,OAAvB,EAAgC,YAAhC;AACA,aAAW,WAAX,CAAuB,SAAvB;AACA,MAAI,YAAY,SAAS,aAAT,CAAuB,IAAvB,CAAhB;AACA,YAAU,YAAV,CAAuB,OAAvB,EAAgC,YAAhC;AACA,aAAW,WAAX,CAAuB,SAAvB;AACA,MAAI,SAAS,SAAS,aAAT,CAAuB,IAAvB,CAAb;AACA,SAAO,YAAP,CAAoB,OAApB,EAA6B,QAA7B;AACA,SAAO,WAAP,eAA+B,MAA/B;;AAEA,MAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,WAAxB,IAAuC,KAAK,QAAL,CAAc,KAAd,KAAwB,SAAnE,EAA8E;AAC5E,WAAO,KAAP,CAAa,KAAb,GAAqB,SAArB;AACA,QAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,IAA5B,EAAkC;AACrC,gBAAU,KAAV,CAAgB,MAAhB,GAAyB,mBAAzB;AACI,KAFD,MAEO,IAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,IAA5B,EAAkC;AAC5C,gBAAU,KAAV,CAAgB,MAAhB,GAAyB,mBAAzB;AACI,KAFM,MAEA,IAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,IAA5B,EAAkC;AAC5C,gBAAU,KAAV,CAAgB,MAAhB,GAAyB,mBAAzB;AACI,KAFM,MAEA,IAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,IAA5B,EAAkC;AAC5C,gBAAU,KAAV,CAAgB,MAAhB,GAAyB,mBAAzB;AACI;AACF,GAXD,MAWO,IAAI,KAAK,QAAL,CAAc,KAAd,KAAwB,WAA5B,EAAwC;AAC7C,QAAI,SAAS,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAb;AACA,QAAI,aAAa,OAAO,MAAP,CAAc,KAAK,KAAL,CAAW,KAAK,MAAL,KAAc,OAAO,MAAhC,CAAd,EAAuD,CAAvD,EAA0D,CAA1D,CAAjB;AACA,QAAI,aAAa,OAAO,MAAP,CAAc,KAAK,KAAL,CAAW,KAAK,MAAL,KAAc,OAAO,MAAhC,CAAd,EAAuD,CAAvD,EAA0D,CAA1D,CAAjB;AACA,WAAO,KAAP,CAAa,KAAb,GAAqB,UAArB;AACA,cAAU,KAAV,CAAgB,MAAhB,GAAyB,eAAe,UAAxC;AACD,GANM,MAMA;AACL,WAAO,KAAP,CAAa,KAAb,GAAqB,SAArB;AACA,cAAU,KAAV,CAAgB,MAAhB,GAAyB,mBAAzB;AACD;AACD,aAAW,WAAX,CAAuB,MAAvB;;AAEA,YAAU,WAAV,CAAsB,UAAtB;AACA,MAAI,kBAAkB,SAAS,aAAT,CAAuB,GAAvB,CAAtB;AACA,kBAAgB,SAAhB,GAA4B,4BAA5B;AACA,kBAAgB,YAAhB,CAA6B,OAA7B,EAAsC,kBAAtC;AACA,YAAU,WAAV,CAAsB,eAAtB;AACD,CA9CD;;;;;;;;;;AAwDA,KAAK,SAAL,CAAe,WAAf,GAA6B,UAAS,OAAT,EAAkB,QAAlB,EAA4B;AACrD,MAAI,CAAC,KAAK,QAAV,EAAoB;AACvB,QAAI,YAAY,SAAS,cAAT,CAAwB,WAAxB,CAAhB;AACA,QAAI,CAAC,KAAK,MAAV,EAAkB;AACd,WAAK,MAAL,GAAc,IAAd;AACA,2BAAqB,OAArB;AACA,eAAS,IAAT,CAAc,KAAd,CAAoB,eAApB,GAAsC,OAAtC;AACA,gBAAU,KAAV,CAAgB,OAAhB,GAA0B,KAA1B;AACH,KALD,MAKO;AACH,WAAK,MAAL,GAAc,KAAd;AACA,eAAS,IAAT,CAAc,KAAd,CAAoB,eAApB,GAAsC,SAAtC;AACA,gBAAU,KAAV,CAAgB,OAAhB,GAA0B,GAA1B;AACA,4BAAsB,QAAtB;AACH;AACG;AACJ,CAfD;;;;;;;AAsBA,KAAK,SAAL,CAAe,UAAf,GAA4B,UAAS,KAAT,EAAgB;AACxC,OAAK,aAAL,CAAmB,SAAnB,CAA6B,gBAA7B;AACA,OAAK,aAAL,CAAmB,SAAnB,CAA6B,gBAA7B;AACA,QAAM,iBAAN;AACH,CAJD;;;;;;;;;;AAcA,IAAI,SAAS,SAAT,MAAS,CAAS,KAAT,EAA8G;AAAA,MAA9F,YAA8F,yDAAjF,CAAiF;AAAA,MAA9E,KAA8E,yDAAxE,GAAwE;AAAA,MAAnE,MAAmE,yDAA5D,EAA4D;AAAA,MAAxD,QAAwD,yDAA/C,EAAC,KAAK,QAAN,EAA+C;AAAA,MAA9B,IAA8B,yDAAzB,WAAyB;AAAA,MAAZ,KAAY,yDAAN,IAAM;;AACvH,OAAK,YAAL,GAAoB,YAApB;AACA,OAAK,MAAL,GAAc;AACjB,UAAM,CADW;AAEjB,WAAO,MAAM;AAFI,GAAd;AAIA,OAAK,KAAL,GAAa,MAAM,KAAnB;AACA,OAAK,WAAL,GAAmB,SAAS,GAA5B;AACA,OAAK,YAAL,GAAoB,KAApB;AACA,OAAK,WAAL,GAAmB,CAAnB;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,WAAL,GAAmB;AACtB,OAAI,KAAK,KAAL,GAAW,CADO;AAEtB,OAAI,KAAK,MAAL,GAAY;AAFM,GAAnB;AAIA,OAAK,QAAL,GAAgB;;AAEnB,OAAK,MAAM,KAAN,GAAY,CAAb,GAAmB,KAAK,WAAL,CAAiB,CAFrB;;;AAKnB,OAAK,KAAK,YAAL,KAAsB,CAAvB,GAA6B,MAAM,MAAN,GAAe,KAAK,MAApB,GAA6B,CAA1D,GAA+D;AALhD,GAAhB;AAOA,OAAK,cAAL,GAAsB,CAAtB;AACH,CA1BD;;AA4BA,OAAO,SAAP,CAAiB,YAAjB,GAAgC,YAAW;AACvC,OAAK,cAAL;AACH,CAFD;;AAIA,OAAO,SAAP,CAAiB,mBAAjB,GAAuC,YAAW;AAC9C,OAAK,cAAL,GAAsB,CAAtB;AACH,CAFD;;;;;;;;;AAWA,OAAO,SAAP,CAAiB,QAAjB,GAA4B,YAAqB;AAAA,MAAZ,QAAY,yDAAH,CAAG;;AAC7C,MAAK,KAAK,QAAL,CAAc,CAAd,GAAkB,QAAnB,GAA+B,KAAK,MAAL,CAAY,IAA/C,EAAqD;AACxD,SAAK,QAAL,CAAc,CAAd,IAAmB,QAAnB;AACI,GAFD,MAEO;AACV,SAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAL,CAAY,IAA9B;AACI;AACJ,CAND;;;;;;;;;AAeA,OAAO,SAAP,CAAiB,SAAjB,GAA6B,YAAqB;AAAA,MAAZ,QAAY,yDAAH,CAAG;;AAC9C,MAAK,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,KAAvB,GAA+B,QAAhC,GAA4C,KAAK,MAAL,CAAY,KAA5D,EAAmE;AACtE,SAAK,QAAL,CAAc,CAAd,IAAmB,QAAnB;AACI,GAFD,MAEO;AACV,SAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,KAA3C;AACI;AACJ,CAND;;;;;;;AAaA,OAAO,SAAP,CAAiB,IAAjB,GAAwB,UAAS,OAAT,EAAiC;AAAA,MAAf,KAAe,yDAAT,OAAS;;AACrD,UAAQ,IAAR;AACA,UAAQ,SAAR,GAAoB,KAApB;AACA,UAAQ,QAAR,CAAiB,KAAK,QAAL,CAAc,CAA/B,EAAkC,KAAK,QAAL,CAAc,CAAhD,EAAmD,KAAK,KAAxD,EAA+D,KAAK,MAApE;AACA,UAAQ,OAAR;AACH,CALD;;;;;;;AAYA,OAAO,SAAP,CAAiB,YAAjB,GAAgC,YAAW;AACvC,MAAI,SAAS,KAAK,YAAL,GAAkB,EAA/B;AACA,MAAI,KAAK,KAAL,GAAa,MAAb,IAAuB,KAAK,YAAhC,EAA8C;AACjD,SAAK,KAAL,IAAc,MAAd;AACI,GAFD,MAEO;AACV,SAAK,KAAL,GAAa,KAAK,YAAlB;AACI;AACJ,CAPD;;;;;;;AAcA,OAAO,SAAP,CAAiB,YAAjB,GAAgC,YAAW;AACvC,MAAI,SAAS,KAAK,YAAL,GAAkB,EAA/B;AACA,MAAI,KAAK,KAAL,GAAa,MAAb,IAAuB,CAA3B,EAA8B;AACjC,SAAK,KAAL,GAAa,CAAb;AACI,GAFD,MAEO;AACV,SAAK,KAAL,IAAc,MAAd;AACI;AACJ,CAPD;;;;;;AAaA,OAAO,SAAP,CAAiB,QAAjB,GAA4B,YAAW;AACnC,OAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAL,CAAY,IAA9B;AACH,CAFD;;;;;;AAQA,OAAO,SAAP,CAAiB,SAAjB,GAA6B,YAAW;AACpC,OAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,KAA3C;AACH,CAFD;;;;;;;AASA,OAAO,SAAP,CAAiB,gBAAjB,GAAoC,YAAW;AAC3C,OAAK,MAAL,GAAc,EAAd;AACA,MAAI,KAAK,WAAL,KAAqB,QAAzB,EAAmC;AACtC,QAAI,UAAU,iBAAd;AACA,SAAK,IAAI,QAAQ,CAAjB,EAAoB,SAAS,EAA7B,EAAiC,OAAjC,EAA0C;AACtC,UAAI,YAAY,UAAU,KAAV,GAAkB,MAAlC;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,SAAV,CAAjB;AACH;AACG,GAND,MAMO,IAAI,KAAK,WAAL,KAAqB,OAAzB,EAAkC;AAC5C,QAAI,WAAU,wBAAd;AACA,SAAK,IAAI,SAAQ,CAAjB,EAAoB,UAAS,EAA7B,EAAiC,QAAjC,EAA0C;AACtC,UAAI,aAAY,WAAU,MAAV,GAAkB,MAAlC;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,UAAV,CAAjB;AACH;AACG,GANM,MAMA,IAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAC9C,QAAI,cAAY,IAAI,KAAJ,8BAAhB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,WAAjB;AACI,GAHM,MAGA,IAAI,KAAK,WAAL,KAAqB,WAAzB,EAAsC;AAChD,QAAI,aAAa,IAAI,KAAJ,gCAAjB;AACA,QAAI,aAAa,IAAI,KAAJ,gCAAjB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,UAAjB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,UAAjB;AACI;AACJ,CAvBD;;;;;;;AA8BA,OAAO,SAAP,CAAiB,QAAjB,GAA4B,YAAW;AACnC,MAAI,cAAc,KAAK,KAAL,CAAW,KAAK,MAAL,KAAc,KAAK,MAAL,CAAY,MAArC,CAAlB;AACA,MAAI,iBAAiB,KAAK,MAAL,CAAY,WAAZ,CAArB;;AAEA,OAAK,WAAL,IAAqB,KAAK,WAAL,GAAmB,CAApB,GAAyB,GAAzB,GAA+B,CAAnD;AACA,iBAAe,MAAf,GAAwB,KAAK,WAA7B;AACA,iBAAe,IAAf;;AAEA,OAAK,YAAL;AACH,CATD;;;;;;;;;;AAmBA,IAAI,OAAO,SAAP,IAAO,CAAS,KAAT,EAA+D;AAAA,MAA/C,KAA+C,yDAAzC,EAAyC;AAAA,MAArC,MAAqC,yDAA9B,EAA8B;AAAA,MAA1B,SAA0B,yDAAhB,CAAgB;AAAA,MAAb,SAAa,yDAAH,CAAG;;AACtE,OAAK,MAAL,GAAc;AACjB,SAAK;AACD,aAAO;AACV,WAAG,CADO;AAEV,WAAG;AAFO,OADN,EAIE,KAAK;AACX,WAAG,MAAM,KADE;AAEX,WAAG;AAFQ;AAJP,KADY;AAUjB,YAAQ;AACJ,aAAO;AACV,WAAG,CADO;AAEV,WAAG,MAAM;AAFC,OADH,EAID,KAAK;AACX,WAAG,MAAM,KADE;AAEX,WAAG,MAAM;AAFE;AAJJ,KAVS;AAmBjB,UAAM;AACF,aAAO;AACV,WAAG,CADO;AAEV,WAAG;AAFO,OADL,EAIC,KAAK;AACX,WAAG,CADQ;AAEX,WAAG,MAAM;AAFE;AAJN,KAnBW;AA4BjB,WAAO;AACH,aAAO;AACV,WAAG,MAAM,KADC;AAEV,WAAG;AAFO,OADJ,EAIA,KAAK;AACX,WAAG,MAAM,KADE;AAEX,WAAG,MAAM;AAFE;AAJL;AA5BU,GAAd;AAsCA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,KAAL,GAAa,MAAM,KAAnB;AACA,OAAK,QAAL,GAAgB;AACnB,OAAG,SADgB;AAEnB,OAAG;AAFgB,GAAhB;AAIA,OAAK,QAAL,GAAgB;AACnB,OAAG,MAAM,KAAN,GAAY,CADI;AAEnB,OAAG,MAAM,MAAN,GAAa;AAFG,GAAhB;AAIA,OAAK,QAAL,GAAgB,MAAM,WAAtB;AACA,OAAK,YAAL,GAAoB,CAApB;AACA,MAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,SAAK,MAAL,GAAc,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAd;AACI,GAFD,MAEO,IAAI,KAAK,QAAL,KAAkB,SAAtB,EAAiC;AAC3C,SAAK,MAAL,GAAc,CAAC,OAAD,CAAd;AACI,GAFM,MAEA;AACV,SAAK,MAAL,GAAc,CAAC,SAAD,CAAd;AACI;AACJ,CA3DD;;;;;;;;;;AAqEA,KAAK,SAAL,CAAe,SAAf,GAA2B,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AAClD,MAAI,KAAK,QAAQ,KAAR,CAAc,CAAvB;AACA,MAAI,KAAK,QAAQ,KAAR,CAAc,CAAvB;AACA,MAAI,KAAK,QAAQ,GAAR,CAAY,CAArB;AACA,MAAI,KAAK,QAAQ,GAAR,CAAY,CAArB;AACA,MAAI,KAAK,QAAQ,KAAR,CAAc,CAAvB;AACA,MAAI,KAAK,QAAQ,KAAR,CAAc,CAAvB;AACA,MAAI,KAAK,QAAQ,GAAR,CAAY,CAArB;AACA,MAAI,KAAK,QAAQ,GAAR,CAAY,CAArB;;AAEA,MAAI,QAAQ,CAAC,KAAG,EAAH,GAAQ,KAAG,EAAZ,KAAiB,KAAK,EAAtB,IAA4B,CAAC,KAAK,EAAN,KAAW,KAAG,EAAH,GAAQ,KAAG,EAAtB,CAAxC;AACA,MAAI,WAAW,CAAC,KAAK,EAAN,KAAW,KAAK,EAAhB,IAAsB,CAAC,KAAK,EAAN,KAAW,KAAK,EAAhB,CAArC;AACA,MAAI,KAAK,QAAM,QAAf;;AAEA,MAAI,QAAQ,CAAC,KAAG,EAAH,GAAQ,KAAG,EAAZ,KAAiB,KAAK,EAAtB,IAA4B,CAAC,KAAK,EAAN,KAAW,KAAG,EAAH,GAAQ,KAAG,EAAtB,CAAxC;AACA,MAAI,WAAW,CAAC,KAAK,EAAN,KAAW,KAAK,EAAhB,IAAsB,CAAC,KAAK,EAAN,KAAW,KAAK,EAAhB,CAArC;AACA,MAAI,KAAK,QAAM,QAAf;;AAEA,MAAI,qBAAJ;;AAEA,MAAI,SAAS,EAAT,KAAgB,SAAS,EAAT,CAApB,EAAkC;AACrC,mBAAe;AACX,SAAG,EADQ;AAEX,SAAG;AAFQ,KAAf;AAII,GALD,MAKO;AACV,mBAAe,KAAf;AACI;;AAED,SAAO,YAAP;AACH,CA9BD;;;;;;;;;;;;AA0CA,KAAK,SAAL,CAAe,eAAf,GAAiC,UAAS,KAAT,EAAgB;AAC/C,MAAI,0BAAJ;MAAuB,0BAAvB;AACA,MAAI,uBAAuB,EAAC,GAAG,KAAK,QAAL,CAAc,CAAlB,EAAqB,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAhD,EAA3B;AACA,MAAI,wBAAwB,EAAC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,KAA5B,EAAoC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAA/D,EAA5B;;AAEA,MAAI,KAAK;AACP,WAAO;AACH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAD9B;AAEH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B;AAF9B,KADA,EAIJ,KAAK;AACJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB,KADvD;AAEJ,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B;AAF7B;AAJD,GAAT;AASA,sBAAoB;AAChB,WAAO,qBADS;AAEhB,SAAK;AACH,SAAI,sBAAsB,CAAtB,GAA0B,KAAK,QAAL,CAAc,CADzC;AAEH,SAAI,sBAAsB,CAAtB,GAA0B,KAAK,QAAL,CAAc;AAFzC;AAFW,GAApB;AAOA,sBAAoB;AAChB,WAAO,oBADS;AAEhB,SAAK;AACH,SAAI,qBAAqB,CAArB,GAAyB,KAAK,QAAL,CAAc,CADxC;AAEH,SAAI,qBAAqB,CAArB,GAAyB,KAAK,QAAL,CAAc;AAFxC;AAFW,GAApB;AAOA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACD,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,0BAA0B,KAAK,SAAL,CAAe,iBAAf,EAAkC,KAAK,MAAL,CAAY,KAA9C,CAA9B;;AAEA,MAAK,mBAAmB,uBAApB,IAAiD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,CAAsB,CAAjD,IAAsD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAAzI,IAAgJ,gBAAgB,CAAhB,KAAsB,wBAAwB,CAA9C,IAAmD,gBAAgB,CAAhB,KAAsB,wBAAwB,CAArP,EAAyP;;AAErP,SAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,KAApD;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,MAApD;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAlBD,OAqBK,IAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAEjI,WAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,KAA5C;AACA,WAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,MAA5C;;AAEA,WAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,UAAI,SAAS,UAAb,EAAyB;AAC5B,aAAK,QAAL;AACI;;AAED,WAAK,gBAAL;;AAEA,WAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,UAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,aAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ,KAjBI,MAkBA,IAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAEjI,WAAK,QAAL,CAAc,CAAd,GAAkB,gBAAgB,CAAlC;AACA,WAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,MAA5C;;AAEA,WAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,UAAI,SAAS,UAAb,EAAyB;AAC5B,aAAK,QAAL;AACI;;AAED,WAAK,gBAAL;;AAEA,WAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,UAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,aAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAjBI,SAoBA,IAAI,2BAA2B,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAwB,CAAlF,EAAqF;;AAEtF,aAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,KAApD;AACA,aAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,MAApD;;AAEA,aAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;;AAEA,cAAM,SAAN;;AAEA,YAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,eAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAZI,WAeA,IAAI,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB,CAAuB,CAAlD,IAAuD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB,CAAuB,CAA7G,EAAgH;;;AAGjH,iBAAO;AACV,oBAAQ,IADE;AAEV,yBAAa;AAFH,WAAP;AAIH;;;AAPI,aAUA;AACD,iBAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACA,iBAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACH;AACD,CAxHD;;;;;;;;;;;;AAqIA,KAAK,SAAL,CAAe,eAAf,GAAiC,UAAS,KAAT,EAAgB;AAC/C,MAAI,0BAAJ;MAAuB,0BAAvB;AACA,MAAI,oBAAoB,EAAC,GAAG,KAAK,QAAL,CAAc,CAAlB,EAAqB,GAAG,KAAK,QAAL,CAAc,CAAtC,EAAxB;AACA,MAAI,qBAAqB,EAAC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,KAA5B,EAAoC,GAAG,KAAK,QAAL,CAAc,CAArD,EAAzB;;AAEA,MAAI,KAAK;AACP,WAAO;AACH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAD9B;AAEH,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB;AAFxD,KADA,EAIJ,KAAK;AACJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB,KADvD;AAEJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB;AAFvD;AAJD,GAAT;AASA,sBAAoB;AACjB,WAAO,kBADU;AAEjB,SAAK;AACR,SAAI,mBAAmB,CAAnB,GAAuB,KAAK,QAAL,CAAc,CADjC;AAER,SAAI,mBAAmB,CAAnB,GAAuB,KAAK,QAAL,CAAc;AAFjC;AAFY,GAApB;AAOD,sBAAoB;AAChB,WAAO,iBADS;AAEhB,SAAK;AACR,SAAI,kBAAkB,CAAlB,GAAsB,KAAK,QAAL,CAAc,CADhC;AAER,SAAI,kBAAkB,CAAlB,GAAsB,KAAK,QAAL,CAAc;AAFhC;AAFW,GAApB;;AAQA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,0BAA0B,KAAK,SAAL,CAAe,iBAAf,EAAkC,KAAK,MAAL,CAAY,KAA9C,CAA9B;;;AAGA,MAAK,mBAAmB,uBAApB,IAAiD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,CAAsB,CAAjD,IAAsD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAAzI,IAAgJ,gBAAgB,CAAhB,KAAsB,wBAAwB,CAA9C,IAAmD,gBAAgB,CAAhB,KAAsB,wBAAwB,CAArP,EAAyP;;AAErP,SAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,KAApD;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAA3C;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAGD,MAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAE5H,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,KAA5C;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAnC;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ,GAjBD,MAkBK,IAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAEjI,SAAK,QAAL,CAAc,CAAd,GAAkB,gBAAgB,CAAlC;AACA,SAAK,QAAL,CAAc,CAAd,GAAkB,gBAAgB,CAAlC;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAjBI,OAoBA,IAAI,2BAA2B,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAwB,CAAlF,EAAqF;;AAEtF,WAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAAxB,GAA4B,KAAK,KAApD;AACA,WAAK,QAAL,CAAc,CAAd,GAAmB,wBAAwB,CAA3C;;AAEA,WAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;;AAEA,YAAM,SAAN;;AAEA,UAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,aAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAZI,SAeA,IAAI,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAoB,CAA/C,IAAoD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAoB,CAAvG,EAA0G;;;AAG3G,eAAO;AACV,kBAAQ,IADE;AAEV,uBAAa;AAFH,SAAP;AAIH;;;AAPI,WAUA;AACD,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACA,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACH;AACD,CA1HD;;;;;;;;;;;;AAsIA,KAAK,SAAL,CAAe,eAAf,GAAiC,UAAS,KAAT,EAAgB;AAC/C,MAAI,0BAAJ;MAAuB,0BAAvB;AACA,MAAI,uBAAuB,EAAC,GAAG,KAAK,QAAL,CAAc,CAAlB,EAAqB,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAAhD,EAA3B;AACA,MAAI,wBAAwB,EAAC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,KAA5B,EAAoC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,MAA/D,EAA5B;;AAEA,MAAI,KAAK;AACP,WAAO;AACH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAD9B;AAEH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B;AAF9B,KADA,EAIJ,KAAK;AACJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB,KADvD;AAEJ,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B;AAF7B;AAJD,GAAT;AASA,sBAAoB;AACjB,WAAO,oBADU;AAEjB,SAAK;AACR,SAAI,qBAAqB,CAArB,GAAyB,KAAK,QAAL,CAAc,CADnC;AAER,SAAI,qBAAqB,CAArB,GAAyB,KAAK,QAAL,CAAc;AAFnC;AAFY,GAApB;AAOD,sBAAoB;AAChB,WAAO,qBADS;AAEhB,SAAK;AACR,SAAI,sBAAsB,CAAtB,GAA0B,KAAK,QAAL,CAAc,CADpC;AAER,SAAI,sBAAsB,CAAtB,GAA0B,KAAK,QAAL,CAAc;AAFpC;AAFW,GAApB;;AAQA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,yBAAyB,KAAK,SAAL,CAAe,iBAAf,EAAkC,KAAK,MAAL,CAAY,IAA9C,CAA7B;;;AAGA,MAAK,mBAAmB,sBAApB,IAAgD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,CAAhD,IAAqD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAAvI,IAA8I,gBAAgB,CAAhB,KAAsB,uBAAuB,CAA7C,IAAkD,gBAAgB,CAAhB,KAAsB,uBAAuB,CAAjP,EAAqP;;AAEjP,SAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAAvB,GAA2B,KAAK,MAAnD;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAGD,MAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAE5H,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAnC;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,MAA5C;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ,GAjBD,MAkBK,IAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAEjI,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,KAA5C;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,MAA5C;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAjBI,OAoBA,IAAI,0BAA0B,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAuB,CAAhF,EAAmF;;AAEpF,WAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;AACA,WAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAAvB,GAA2B,KAAK,MAAnD;;AAEA,WAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;;AAEA,YAAM,SAAN;;AAEA,UAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,aAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAZI,SAeA,IAAI,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB,CAAuB,CAAlD,IAAuD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB,CAAuB,CAA7G,EAAgH;;;AAGjH,eAAO;AACV,kBAAQ,IADE;AAEV,uBAAa;AAFH,SAAP;AAIH;;;AAPI,WAUA;AACD,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACA,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACH;AAED,CA3HD;;;;;;;;;;;;AAuIA,KAAK,SAAL,CAAe,eAAf,GAAiC,UAAS,KAAT,EAAgB;AAC/C,MAAI,0BAAJ;MAAuB,0BAAvB;AACA,MAAI,oBAAoB,EAAC,GAAG,KAAK,QAAL,CAAc,CAAlB,EAAqB,GAAG,KAAK,QAAL,CAAc,CAAtC,EAAxB;AACA,MAAI,qBAAqB,EAAC,GAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,KAA5B,EAAoC,GAAG,KAAK,QAAL,CAAc,CAArD,EAAzB;;AAEA,MAAI,KAAK;AACP,WAAO;AACH,SAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAD9B;AAEH,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB;AAFxD,KADA,EAIJ,KAAK;AACJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB,KADvD;AAEJ,SAAI,KAAK,KAAL,CAAW,SAAX,CAAqB,QAArB,CAA8B,CAA9B,GAAkC,KAAK,KAAL,CAAW,SAAX,CAAqB;AAFvD;AAJD,GAAT;AASA,sBAAoB;AACjB,WAAO,iBADU;AAEjB,SAAK;AACR,SAAI,kBAAkB,CAAlB,GAAsB,KAAK,QAAL,CAAc,CADhC;AAER,SAAI,kBAAkB,CAAlB,GAAsB,KAAK,QAAL,CAAc;AAFhC;AAFY,GAApB;AAOD,sBAAoB;AAChB,WAAO,kBADS;AAEhB,SAAK;AACR,SAAI,mBAAmB,CAAnB,GAAuB,KAAK,QAAL,CAAc,CADjC;AAER,SAAI,mBAAmB,CAAnB,GAAuB,KAAK,QAAL,CAAc;AAFjC;AAFW,GAApB;;AAQA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,kBAAkB,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,CAAtB;AACA,MAAI,yBAAyB,KAAK,SAAL,CAAe,iBAAf,EAAkC,KAAK,MAAL,CAAY,IAA9C,CAA7B;;;AAGA,MAAK,mBAAmB,sBAApB,IAAgD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,CAAhD,IAAqD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAAvI,IAA8I,gBAAgB,CAAhB,KAAsB,uBAAuB,CAA7C,IAAkD,gBAAgB,CAAhB,KAAsB,uBAAuB,CAAjP,EAAqP;;AAEjP,SAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAGD,MAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAE5H,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAnC;AACA,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAnC;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;AACH,GAbD,MAcK,IAAI,mBAAmB,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,GAAG,GAAH,CAAO,CAArD,IAA0D,gBAAgB,CAAhB,IAAqB,GAAG,GAAH,CAAO,CAAtF,IAA2F,gBAAgB,CAAhB,IAAqB,GAAG,KAAH,CAAS,CAA7H,EAAgI;;AAEjI,SAAK,QAAL,CAAc,CAAd,GAAmB,gBAAgB,CAAhB,GAAoB,KAAK,KAA5C;AACA,SAAK,QAAL,CAAc,CAAd,GAAkB,gBAAgB,CAAlC;;AAEA,SAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACA,QAAI,SAAS,UAAb,EAAyB;AAC5B,WAAK,QAAL;AACI;;AAED,SAAK,gBAAL;;AAEA,SAAK,KAAL,CAAW,SAAX,CAAqB,QAArB;;AAEA,QAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,WAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAjBI,OAoBA,IAAI,0BAA0B,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAuB,CAAhF,EAAmF;;AAEpF,WAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;AACA,WAAK,QAAL,CAAc,CAAd,GAAmB,uBAAuB,CAA1C;;AAEA,WAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;;AAEA,YAAM,SAAN;;AAEA,UAAI,KAAK,QAAL,KAAkB,WAAtB,EAAmC;AACtC,aAAK,YAAL,GAAqB,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAxC,GAA6C,KAAK,YAAL,GAAoB,CAAjE,GAAqE,CAAzF;AACI;AACJ;;;AAZI,SAeA,IAAI,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAoB,CAA/C,IAAoD,kBAAkB,GAAlB,CAAsB,CAAtB,IAA2B,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAoB,CAAvG,EAA0G;;;AAG3G,eAAO;AACV,kBAAQ,IADE;AAEV,uBAAa;AAFH,SAAP;AAIH;;;AAPI,WAUA;AACD,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACA,eAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,QAAL,CAAc,CAAjC;AACH;AACD,CAtHD;;;;;;;;;;;;AAkIA,KAAK,SAAL,CAAe,IAAf,GAAsB,UAAS,KAAT,EAAgB;AAClC,MAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB,IAAuB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAA7C,EAAgD;AAC9C,WAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACD,GAFD,MAEO,IAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB,IAAuB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAA7C,EAAgD;AACrD,WAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACD,GAFM,MAEA,IAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB,IAAuB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAA7C,EAAgD;AACrD,WAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACD,GAFM,MAEA,IAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB,IAAuB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAA7C,EAAgD;AACrD,WAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACD,GAFM,MAEA;;AAEN,UAAM,IAAI,KAAJ,CAAU,mCAAmC,KAAK,QAAL,CAAc,CAAjD,GAAqD,OAArD,GAA+D,KAAK,QAAL,CAAc,CAAvF,CAAN;AACA;AACJ,CAbD;;;;;;;;AAqBA,KAAK,SAAL,CAAe,IAAf,GAAsB,UAAS,OAAT,EAAkB;AACpC,UAAQ,SAAR,GAAoB,KAAK,MAAL,CAAY,KAAK,YAAjB,CAApB;AACA,UAAQ,QAAR,CAAiB,KAAK,QAAL,CAAc,CAA/B,EAAkC,KAAK,QAAL,CAAc,CAAhD,EAAmD,KAAK,KAAxD,EAA+D,KAAK,MAApE;AAEH,CAJD;;;;;;;AAYA,KAAK,SAAL,CAAe,gBAAf,GAAkC,YAAyB;AAAA,MAAhB,SAAgB,yDAAN,IAAM;;AACvD,OAAK,QAAL,CAAc,CAAd,IAAoB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAnB,GAAwB,CAAC,CAAD,GAAG,SAA3B,GAAuC,SAA1D;AACA,OAAK,QAAL,CAAc,CAAd,IAAoB,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAnB,GAAwB,CAAC,CAAD,GAAG,SAA3B,GAAuC,SAA1D;AACH,CAHD;;;;;;AASA,KAAK,SAAL,CAAe,QAAf,GAA0B,YAAW;AACjC,OAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAApB;AACH,CAFD;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,IAAT,GAAgB;AACd,MAAI,WAAW,CAAf;AACA,SAAO,gBAAP,CAAwB,SAAxB,EAAmC,YAAW;AAC1C,QAAI,MAAM,OAAN,IAAiB,IAAjB,IAAyB,aAAa,CAA1C,EAA6C;;AAElD,YAAM,cAAN;AACA,UAAI,WAAW,SAAS,cAAT,CAAwB,UAAxB,CAAf;AACA,eAAS,KAAT,CAAe,OAAf,GAAyB,MAAzB;;AAEA;AACA;AACM,KARD,MAQO,IAAI,MAAM,OAAN,IAAiB,IAAjB,IAAyB,aAAa,CAA1C,EAA6C;;AAEvD,UAAI,qBAAJ;AACA,UAAI,aAAa,SAAS,cAAT,CAAwB,QAAxB,CAAjB;AACA,UAAI,cAAc,SAAS,cAAT,CAAwB,SAAxB,CAAlB;AACA,UAAI,gBAAgB,SAAS,cAAT,CAAwB,WAAxB,CAApB;AACA,UAAI,WAAW,OAAf,EAAwB;AACpB,YAAI,YAAJ;AACA,YAAI,YAAY,SAAS,cAAT,CAAwB,QAAxB,CAAhB;AACA,YAAI,WAAW,SAAS,cAAT,CAAwB,OAAxB,CAAf;AACA,YAAI,UAAU,OAAd,EAAuB;AAC5B,gBAAM,QAAN;AACM,SAFD,MAEO,IAAI,SAAS,OAAb,EAAsB;AAClC,gBAAM,OAAN;AACM;AACD,YAAI,cAAc,SAAS,cAAT,CAAwB,cAAxB,CAAlB;AACA,YAAI,aAAa,YAAY,OAAZ,CAAoB,YAAY,aAAhC,EAA+C,KAAhE;AACA,uBAAe;AACpB,gBAAM,QADc;AAEpB,eAAK,GAFe;AAGpB,iBAAO;AAHa,SAAf;AAKH,OAhBD,MAgBO,IAAI,YAAY,OAAhB,EAAyB;AAC5B,uBAAe;AACpB,gBAAM,SADc;AAEpB,eAAK,SAFe;AAGpB,iBAAO;AAHa,SAAf;AAKH,OANM,MAMA,IAAI,cAAc,OAAlB,EAA2B;AAC9B,uBAAe;AACpB,gBAAM,WADc;AAEpB,eAAK,WAFe;AAGpB,iBAAO;AAHa,SAAf;AAKH;;AAED,UAAI,YAAY,SAAS,cAAT,CAAwB,WAAxB,CAAhB;AACA,gBAAU,SAAV,GAAsB,EAAtB;;AAEA,UAAI,YAAY,IAAI,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,YAApB,CAAhB;AACA,UAAI,cAAc,IAAI,MAAJ,CAAW,SAAX,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,YAAjC,CAAlB;AACA,UAAI,eAAe,IAAI,MAAJ,CAAW,SAAX,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,YAAjC,CAAnB;AACA,UAAI,WAAW,IAAI,IAAJ,CAAS,SAAT,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,UAAI,WAAW,IAAI,IAAJ,CAAS,WAAT,EAAsB,YAAtB,EAAoC,QAApC,EAA8C,YAA9C,CAAf;AACA,eAAS,MAAT,CAAgB,KAAhB,CAAsB,IAAtB;AACA,eAAS,UAAT,CAAoB,SAApB;;AAEF;AACM;AACJ,GA1DD;AA2DD;AACD","file":"trans-pong.js","sourcesContent":["\"use strict\";\n\n// A function that loads the second start menu to select game mode\nfunction setupMenu2() {\n  let menu = document.getElementById(\"menu\");\n  let childElt = document.querySelector(\"p\");\n  let modeContainer = document.createElement(\"div\");\n  modeContainer.setAttribute(\"id\", \"mode-container\");\n  menu.insertBefore(modeContainer, childElt);\n\n  modeContainer.innerHTML = `\n<h2 class=\"mode-header\">mode:</h2>\n<div class=\"mode-row\">\n  <span class=\"modes\">\n    <label for=\"tennis\">Tennis</label>\n    <input type=\"radio\" name=\"game-type\" id=\"tennis\" checked>\n  </span>\n  <span class=\"modes\">\n    <label>Classic</label>\n    <input type=\"radio\" name=\"game-type\" id=\"classic\">\n  </span>\n  <span class=\"modes\">\n    <label>Chromatic</label>\n    <input type=\"radio\" name=\"game-type\" id=\"chromatic\">\n  </span>\n</div>\n<h2 class=\"mode-header\">sfx:</h2>\n<div class=\"mode-row\">\n  <span class=\"modes\">\n    <label>Normal</label>\n    <input type=\"radio\" name=\"sound-type\" id=\"normal\" checked>\n  </span>\n  <span class=\"modes\">\n    <label>Grunts</label>\n    <input type=\"radio\" name=\"sound-type\" id=\"grunt\">\n  </span>\n</div>\n<h2 class=\"mode-header\">court:</h2>\n<div class=\"mode-row\">\n  <span class=\"modes\">\n    <select id=\"court-select\">\n      <option value=\"au\">Australian Open</option>\n      <option value=\"fr\">French Open</option>\n      <option value=\"gb\">Wimbledon</option>\n      <option value=\"us\">US Open</option>\n    </select>\n  </span>\n</div>`.trim();\n\n  addEventListener(\"click\", function(event) {\n    let name = event.target.getAttribute(\"name\");\n    let id = event.target.getAttribute(\"id\");\n    if (name === \"game-type\" && id !== \"tennis\") {\n      let select = document.querySelector(\"select\");\n      let soundButtons = document.querySelectorAll('[name=\"sound-type\"]');\n      select.disabled = true;\n      soundButtons[0].disabled = true;\n      soundButtons[1].disabled = true;\n    } else if (name === \"game-type\" && id === \"tennis\") {\n      let select = document.querySelector(\"select\");\n      let soundButtons = document.querySelectorAll('[name=\"sound-type\"]');\n      select.disabled = false;\n      soundButtons[0].disabled = false;\n      soundButtons[1].disabled = false;\n    }\n  });\n}\n\n// Set up animationId to be cleared\nlet animationId;\n// keyCodes\nlet controlCodes = {37: \"p1Left\", 38: \"p1Backhand\", 39: \"p1Right\", 40: \"p1JumpTo\", 65: \"p2Left\", 68: \"p2Right\", 83: \"p2JumpTo\", 87: \"p2Backhand\"};\n\nfunction trackKeys(codes) {\n    var pressed = {};\n    function handler(event) {\n\tif (codes.hasOwnProperty(event.keyCode)) {\n\t    var down = (event.type == \"keydown\");\n\t    pressed[codes[event.keyCode]] = down;\n\t    event.preventDefault();\n\t}\n    }\n    addEventListener(\"keydown\", handler);\n    addEventListener(\"keyup\", handler);\n    return pressed;\n}\n// listen for keydown/up events\nlet keyEvent = trackKeys(controlCodes);\n\n\n/*\n *The Board is set to a width and height via passed in parameters (default values are set in\n *case of undefined), providing the space in which the game will be played and the boundaries\n *in which objects can move. The board also has a space property that will be used to track\n *the positions of entities that are within it. This space property is set and updated by the\n *entities themselves (Ball, Player, etc). The board has a volume property that will control\n *the amplitute of the sounds when the ball collides with the left or right limiti (walls)\n *The board also recieves a gameType object that tells it what sfx need to be used for the\n *collision with limits left and right.\n */\nlet Board = function(width=400, height=600, gameType={sfx: \"normal\"}) {\n    this.width = width;\n    this.height = height;\n    this.space = {};\n    this.volumeLevel = 0;\n    this.gameTypeSfx = gameType.sfx;\n};\n\n/*\n *generateBounceSfx() is a method (much like Player.prototype.generateGrunts()) which\n *iterates through a directory of sound effect files and places the new Audio() instance\n *into an array on the Board (sounds). These sounds will be played via Board.prototype.bounceSfx().\n*/\nBoard.prototype.generateBounceSfx = function() {\n    this.sounds = [];\n    if (this.gameTypeSfx === \"normal\" || this.gameTypeSfx === \"grunt\") {\n\tfor (let sfx = 1; sfx <= 5; sfx++) {\n\t    let sfxTrack = new Audio(`/assets/ball_bounce/${sfx}.mp3`);\n\t    this.sounds.push(sfxTrack);\n\t}\n    } else if (this.gameTypeSfx === \"classic\") {\n\tlet sfxTrack = new Audio(`/assets/classic/limit.mp3`);\n\tthis.sounds.push(sfxTrack);\n    } else if (this.gameTypeSfx === \"chromatic\") {\n\tlet sfxTrack = new Audio(`/assets/digital/limit.mp3`);\n\tthis.sounds.push(sfxTrack);\n    }\n};\n\n/*\n *bounceSfx() is a method on the Ball that will play a random bounce sound effect when invoked.\n *It will increase the Board.volumeLevel (up to 1) each time it is invoked. This method is meant\n *to be utilized when balls hit the walls.\n */\nBoard.prototype.bounceSfx = function() {\n    let randomBounce = Math.floor(Math.random()*this.sounds.length);\n    let randomBounceSrc = this.sounds[randomBounce];\n    // This ensures the audio api doesn't crash (if volume > 1)\n    this.volumeLevel += (this.volumeLevel < 1) ? 0.5 : 0;\n    randomBounceSrc.volume = this.volumeLevel;\n    randomBounceSrc.play();\n};\n/*\n *The Game constructor takes in two players (playerA and playerB) along with the main ball\n *that will be used within the game (mainBall). The Game also contains a score that tracks\n *the points for both playerA and playerB and an activeMembers property where it stores a\n *reference to both players and the balls in play. The Game also contains a sounds object\n *that it used to store various sounds that relate to the games interface (menu selection)\n *The gameOver property is used to terminate the animation and end the current game.\n *The paused propety is used to toggle the game state to paused or unpaused.\n *gameType is an object that tells the game what mode the player has selected, it has\n *three properties, mode sfx, and court to determine the look and sound of the game.\n*/\nlet Game = function(playerA, playerB, mainBall, gameType) {\n    this.score = {\n\tplayerOne: 0,\n\tplayerTwo: 0\n    };\n    this.activeMembers = {\n\tplayerOne: playerA,\n\tplayerTwo: playerB,\n\tballs: [mainBall]\n    };\n    if (gameType.sfx === \"normal\" || gameType.sfx === \"grunt\") {\n\tthis.sounds = {\n\t    start: new Audio(\"/assets/menu/start.mp3\"),\n\t    cheer: new Audio(\"/assets/crowd/cheer.mp3\"),\n\t    whiff: new Audio(\"/assets/racket/whoosh.mp3\"),\n\t    serve: new Audio(\"/assets/misc/serve_up.mp3\")\n\t};\n    } else if (gameType.sfx === \"classic\") {\n\tthis.sounds = {\n\t    start: new Audio(\"/assets/menu/start.mp3\"),\n\t    cheer: new Audio(\"/assets/crowd/cheer.mp3\"),\n\t    whiff: new Audio(\"/assets/classic/point.mp3\"),\n\t    serve: new Audio(\"/assets/misc/serve_up.mp3\")\n\t};\n    } else if (gameType.sfx === \"chromatic\") {\n\tthis.sounds = {\n\t    start: new Audio(\"/assets/menu/start.mp3\"),\n\t    cheer: new Audio(\"/assets/crowd/cheer.mp3\"),\n\t    whiff: new Audio(\"/assets/digital/point.mp3\"),\n\t    serve: new Audio(\"/assets/digital/serve.mp3\")\n\t};\n    }\n    this.gameOver = false;\n    this.paused = false;\n    this.gameType = {\n\tmode: gameType.mode,\n\tsfx: gameType.sfx,\n\tcourt: gameType.court\n    };\n    this.startTime = new Date().getTime();\n    this.topSpeed = 0;\n    this.maxRally = 0;\n};\n\nGame.prototype.elapsedTime = function() {\n    let now = new Date().getTime();\n    let elapsed = now - this.startTime;\n    let milliseconds = parseInt((elapsed % 1000)/100);\n    let seconds = parseInt((elapsed/1000) % 60);\n    let minutes = parseInt((elapsed/(1000*60)) % 60);\n    let hours = parseInt((elapsed/(1000*60*60)) % 24);\n\n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return `${hours}:${minutes}:${seconds}.${milliseconds}`;\n};\n\nGame.prototype.registerSpeed = function() {\n    let xVelocity = this.activeMembers.balls[0].velocity.x;\n    let yVelocity = this.activeMembers.balls[0].velocity.y;\n    let calculatedVelocity = Math.pow(xVelocity, 2) + Math.pow(yVelocity, 2);\n    if (calculatedVelocity > this.topSpeed) {\n\tthis.topSpeed = calculatedVelocity;\n    }\n};\n\nGame.prototype.registerMaxRally = function() {\n    let p1CollisionCount = this.activeMembers.playerOne.collisionCount;\n    let p2CollisionCount = this.activeMembers.playerTwo.collisionCount;\n    let calculatedCount = Math.floor(p1CollisionCount + p2CollisionCount / 2);\n    if (calculatedCount > this.maxRally) {\n\tthis.maxRally = calculatedCount;\n    }\n};\n\n/*\n *initialize() is the driving force behind the game. It essentially sets\n *the game in motion by performing the following actions:\n *1. Populating the Board with playerOne, playerTwo, and a ball.\n *2. Setting up the backdrop canvas which does not need to be re-rendered\n *   frame by frame (i.e black background, dashed-line net, etc...)\n *3. Setting up the main canvas where the animation will take place and\n *   appending it to the document.body (overlapping the backDrop canvas)\n *4. Set eventListeners on the DOM to call moveLeft() or moveRight() for\n *   the corresponding player.\n *5. Creating a render function where we will invoke the draw methods of\n *   each entity (ball and both players) and loop through via requestAnimationFrame,\n *   redrawing each entity as their position changes.\n */\nGame.prototype.initialize = function(board) {\n    // Load sounds\n    this.loadSounds(board);\n\n    let container = document.getElementById(\"container\");\n    let gameContainer = document.createElement(\"div\");\n    gameContainer.style.width = board.width + \"px\";\n    gameContainer.style.height = board.height + \"px\";\n    gameContainer.setAttribute(\"id\", \"game-container\");\n    if (this.gameType.mode === \"tennis\") {\n\tcontainer.setAttribute(\"class\", this.gameType.court + \"-outer\");\n\tgameContainer.setAttribute(\"class\", this.gameType.court + \"-inner\");\n    } else if (this.gameType.mode === \"classic\") {\n\tcontainer.setAttribute(\"class\", \"classic-outer\");\n\tgameContainer.setAttribute(\"class\", \"classic-inner\");\n    } else if (this.gameType.mode === \"chromatic\"){\n\tcontainer.setAttribute(\"class\", \"chromatic-outer\");\n\tgameContainer.setAttribute(\"class\", \"chromatic-inner\");\n    }\n    container.appendChild(gameContainer);\n    board.space.playerOne = this.activeMembers.playerOne;\n    board.space.playerTwo = this.activeMembers.playerTwo;\n    board.space.balls = [];\n    board.space.balls[0]= this.activeMembers.balls[0];\n    // Set up separate canvas for the net and black bgcolor\n    let backDrop = document.createElement(\"canvas\");\n    let backDropCtx = backDrop.getContext('2d');\n    backDrop.width = board.width;\n    backDrop.height = board.height;\n    backDrop.style.position = \"absolute\";\n    backDrop.style.zIndex = 1;\n    gameContainer.appendChild(backDrop);\n    //document.body.appendChild(backDrop);\n    // draw net\n    backDropCtx.save();\n    backDropCtx.strokeStyle = \"white\";\n    backDropCtx.lineWidth = 4;\n    backDropCtx.setLineDash([5, 10]);\n    backDropCtx.beginPath();\n    backDropCtx.moveTo(0, (backDrop.height/2));\n    backDropCtx.lineTo(backDrop.width, (backDrop.height/2));\n    backDropCtx.stroke();\n    backDropCtx.restore();\n\n    // Set up main canvas (for animation)\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext('2d');\n    canvas.width = board.width;\n    canvas.height = board.height;\n    canvas.style.position = \"absolute\";\n    canvas.style.zIndex = 2;\n    gameContainer.appendChild(canvas);\n    // Drawing the ball\n    ctx.fillStyle = this.activeMembers.balls[0].colors[0];\n\n\n    function clearBoard() {\n\tctx.clearRect(0, 0, board.width, board.height);\n    }\n\n    // preserve 'this' (Game)\n    let self = this;\n    // Render function goes here which will call ball.move(), player.draw(), ball.draw()\n    function render() {\n    \tclearBoard();\n    \t// Check for player 1 to move\n    \tif (keyEvent.p1Left && keyEvent.p1JumpTo) {\n    \t    //board.space.playerOne.jumpLeft();\n    \t    board.space.playerOne.moveLeft(15);\n    \t} else if (keyEvent.p1Right && keyEvent.p1JumpTo) {\n    \t    //board.space.playerOne.jumpRight();\n    \t    board.space.playerOne.moveRight(15);\n    \t} else if (keyEvent.p1Left) {\n    \t    board.space.playerOne.moveLeft(10);\n    \t} else if (keyEvent.p1Right) {\n    \t    board.space.playerOne.moveRight(10);\n    \t}\n    \t// Check for player 2 to move\n    \tif (keyEvent.p2Left && keyEvent.p2JumpTo) {\n    \t    //board.space.playerTwo.jumpLeft();\n    \t    board.space.playerTwo.moveLeft(15);\n    \t} else if (keyEvent.p2Right && keyEvent.p2JumpTo) {\n    \t    //board.space.playerTwo.jumpRight();\n    \t    board.space.playerTwo.moveRight(15);\n    \t} else if (keyEvent.p2Left) {\n    \t    board.space.playerTwo.moveLeft(10);\n    \t} else if (keyEvent.p2Right) {\n    \t    board.space.playerTwo.moveRight(10);\n    \t}\n    \t// draw playerOne\n    \tboard.space.playerOne.draw(ctx);\n    \t// draw playerTwo\n    \tboard.space.playerTwo.draw(ctx);\n    \t// iterate through balls array and if the ball.move() returns something. Add point\n    \t// to the correct player and call game.removeBall(), otherwise the ball would have already moved.\n    \t// and it can be drawn\n\n    \tboard.space.balls.forEach((currentBall) => {\n    \t    // Move ball and assign result to variable simultaneously\n    \t    let potentialPoint = currentBall.move(board);\n    \t    if (potentialPoint) {\n        \t\tif (potentialPoint.playerPoint) {\n        \t\t    // Register the length of the rally between p1 and p2\n        \t\t    self.registerMaxRally();\n        \t\t    self.addPoint(potentialPoint.playerPoint);\n        \t\t    // get the string with player who scored the point\n        \t\t    // from the .move() returned object\n        \t\t    let pointWinner = potentialPoint.playerPoint;\n        \t\t    let pointLoser = (pointWinner === \"playerOne\") ? \"playerTwo\" : \"playerOne\";\n        \t\t    // increase winner size and decrease loser size\n        \t\t    self.activeMembers[pointWinner].increaseSize();\n        \t\t    self.activeMembers[pointLoser].decreaseSize();\n        \t\t    // if the loser has reached zero or less size end game\n        \t\t    if (self.activeMembers[pointLoser].width <= 0) {\n        \t\t\t    self.declareWinner(pointWinner);\n            \t\t\tself.sounds.cheer.play();\n            \t\t\tself.gameOver = true;\n                  window.addEventListener(\"keydown\", function(event) {\n                    event.preventDefault();\n                    // If space bar is pressed take to stats page\n                  });\n            \t\t\treturn;\n        \t\t    }\n        \t\t}\n        \t\tif (potentialPoint.remove) {\n        \t\t    // Add whiff sound\n        \t\t    self.sounds.whiff.play();\n        \t\t    // Register speed of the ball before it is removed\n        \t\t    self.registerSpeed();\n        \t\t    self.removeBall(board, currentBall);\n        \t\t    // Reset volume levels for both players\n        \t\t    self.activeMembers.playerOne.volumeLevel = 0;\n        \t\t    self.activeMembers.playerTwo.volumeLevel = 0;\n        \t\t    self.activeMembers.playerOne.clearCollisionCount();\n        \t\t    self.activeMembers.playerTwo.clearCollisionCount();\n        \t\t    setTimeout(function() {\n            \t\t\tlet xVDirection = (Math.random() < 0.5) ? -1 : 1;\n            \t\t\tlet yVDirection = (potentialPoint.playerPoint === \"playerOne\") ? -1 : 1;\n            \t\t\tlet newBall = new Ball(board, 5, 5, 4*xVDirection, 4*yVDirection);\n            \t\t\tself.addBall(board, newBall);\n            \t\t\t// serve sfx\n            \t\t\tself.sounds.serve.play();\n        \t\t    }, 1000);\n        \t\t}\n  \t       }\n           else {\n             currentBall.draw(ctx);\n           }\n      });\n\n      if (self.gameOver) {\n          cancelAnimationFrame(animationId);\n          window.addEventListener(\"keydown\", function(event) {\n            event.preventDefault();\n            if (event.keyCode == \"32\") {\n              self.displayStats();\n            }\n          });\n          return;\n      } else {\n          animationId = requestAnimationFrame(render);\n      }\n    }\n      // Set up event listener for pause\n      window.addEventListener(\"keyup\", function(event) {\n        if (event.keyCode == \"80\") {\n          if (animationId && self.paused === false) {\n    \t       self.togglePause(animationId);\n           }\n           else if (self.paused === true) {\n    \t        self.togglePause(null, render);\n            }\n        }\n      });\n\n      render();\n};\n\n/*\n  * This is a method that displays the statistics of the game after a player has\n  * won and pressed the spacebar after the trophy was shown\n*/\nGame.prototype.displayStats = function() {\n  let statsHTML = `<div id=\"container\">\n                      <div id=\"menu\">\n                        <h1>Computer Tennis</h1>\n                        <hr class=\"rule\">\n                        <div id=\"controls\" style=\"padding-right=0\">\n                          <table>\n                             <tr>\n                                <th scope=\"row\" class=\"player\">Top Speed</th>\n                                <td>${this.topSpeed} px/sec</td>\n                             </tr>\n                             <tr>\n                                <th scope=\"row\" class=\"player\">Elapsed Time</th>\n                                <td>${this.elapsedTime()}</td>\n                             </tr>\n                             <tr>\n                                <th scope=\"row\" class=\"player\">Max Rally</th>\n                                <td>${this.maxRally}</td>\n                             </tr>\n                          </table>\n                        </div>\n                        <p>press space to restart...</p>\n                      </div>\n                    </div>`;\n  document.body.innerHTML = statsHTML;\n\n  window.addEventListener(\"keydown\", function(event) {\n    event.preventDefault();\n    if (event.keyCode == \"32\") {\n      window.location = \"/\";\n    }\n  });\n};\n\n/*\n *addPoint is a method that will add a point the the Game.score for the player provided in\n *the parameter (either 'playerOne' or 'playerTwo')\n*/\nGame.prototype.addPoint = function(player) {\n    if (player !== \"playerOne\" && player !== \"playerTwo\") {\n\tthrow new Error(\"Invalid argument. Must be either 'playerOne' or 'playerTwo'\");\n    }\n    this.score[player] += 1;\n};\n\n/*\n *addBall takes in a ball and board as parameters and appends a newly instantiated Ball to the\n *Game.activeMembers.balls array as well as the Ball.position to the Board.space.balls array.\n *This allows for the ball to be tracked by the Game and the ball's position to be tracked by\n *the board. The ball would then be in charge of updating its own position (Board and Game\n *have direct reference at that point).\n*/\nGame.prototype.addBall = function(board, ball) {\n    this.activeMembers.balls.push(ball);\n    board.space.balls.push(ball);\n};\n\n/*\n *removeBall takes in a ball and board as parameters and removes the ball from the\n *Game.activeMembers.balls array as well as the Ball.position to the Board.space.balls array.\n *The garbage collector will then remove that instance of the Ball once it is no longer in use.\n*/\nGame.prototype.removeBall = function(board, ball) {\n    this.activeMembers.balls = this.activeMembers.balls.filter((currentBall) => {\n\treturn (currentBall !== ball);\n    });\n    board.space.balls = board.space.balls.filter((currentBallPos) => {\n\treturn (currentBallPos !== ball);\n    });\n};\n\n/*\n *declareWinner is the method that displays the trophy page to the winning player.\n *It dynamically generates HTML and appends it to the #container. All styles are\n *handled in the main.css file. A player is passed into the function as a parameter\n *to determine who the winner is.\n*/\nGame.prototype.declareWinner = function(player) {\n  let winner = (player === \"playerOne\") ? \"one\" : \"two\";\n\n  let container = document.getElementById(\"container\");\n  container.innerHTML = \"\";\n\n  let winMessage = document.createElement(\"div\");\n  winMessage.setAttribute(\"class\", \"win-message\");\n  let svgTrophy = document.createElement(\"div\");\n  svgTrophy.setAttribute(\"class\", \"svg-trophy\");\n  winMessage.appendChild(svgTrophy);\n  let trophyBar = document.createElement(\"hr\");\n  trophyBar.setAttribute(\"class\", \"trophy-bar\");\n  winMessage.appendChild(trophyBar);\n  let header = document.createElement(\"h1\");\n  header.setAttribute(\"class\", \"header\");\n  header.textContent = `player ${winner} wins`;\n  // Change colors of hr and text based on court\n  if (this.gameType.court !== \"chromatic\" && this.gameType.court !== \"classic\") {\n    header.style.color = \"#282d2f\";\n    if (this.gameType.court === \"au\") {\n\ttrophyBar.style.border = \"1px solid #678BAB\";\n    } else if (this.gameType.court === \"fr\") {\n\ttrophyBar.style.border = \"1px solid #D05006\";\n    } else if (this.gameType.court === \"gb\") {\n\ttrophyBar.style.border = \"1px solid #FFFEFF\";\n    } else if (this.gameType.court === \"us\") {\n\ttrophyBar.style.border = \"1px solid #6090BE\";\n    }\n  } else if (this.gameType.court === \"chromatic\"){\n    let colors = [\"#ffc26b\", \"#ff796b\", \"#5991c2\", \"#59d574\"];\n    let randColor1 = colors.splice(Math.floor(Math.random()*colors.length), 1)[0];\n    let randColor2 = colors.splice(Math.floor(Math.random()*colors.length), 1)[0];\n    header.style.color = randColor1;\n    trophyBar.style.border = \"1px solid \" + randColor2;\n  } else {\n    header.style.color = \"#f8f4e3\";\n    trophyBar.style.border = \"1px solid #7a7978\";\n  }\n  winMessage.appendChild(header);\n\n  container.appendChild(winMessage);\n  let continueMessage = document.createElement(\"p\");\n  continueMessage.innerHTML = \"press space to continue...\";\n  continueMessage.setAttribute(\"class\", \"continue-message\");\n  container.appendChild(continueMessage);\n};\n\n/*\n *togglePause is simply a method that allows the game to be played or paused, toggling a boolean\n *to know which one to do. It relies on the requestAnimationFrame id that is used to\n *cancel the animation frame at the end of the game. Note that in order for the game to move to\n *the paused state we must pass in the animationFrame Id as a parameter. Otherwise it may be made\n *null and the callback function must be passed instead (which will have requestAnimationFrame called\n *on it). The game will only pause if the state of gameOver is false.\n*/\nGame.prototype.togglePause = function(frameId, callback) {\n    if (!this.gameOver) {\n\tlet container = document.getElementById(\"container\");\n\tif (!this.paused) {\n\t    this.paused = true;\n\t    cancelAnimationFrame(frameId);\n\t    document.body.style.backgroundColor = \"black\";\n\t    container.style.opacity = \"0.4\";\n\t} else {\n\t    this.paused = false;\n\t    document.body.style.backgroundColor = \"#97B067\";\n\t    container.style.opacity = \"1\";\n\t    requestAnimationFrame(callback);\n\t}\n    }\n};\n\n/*\n *loadSounds() is a method that simply loads each sound the game will utilize. The idea is that\n *the game will initially load and reuse sounds rather than creating new Audio objects as the\n *game progresses.\n */\nGame.prototype.loadSounds = function(board) {\n    this.activeMembers.playerOne.generateGruntSfx();\n    this.activeMembers.playerTwo.generateGruntSfx();\n    board.generateBounceSfx();\n};\n\n/*\n *The Player constructor takes in five optional parameters for a player number, width, height, name\n *and photo source along with a required parameter for the board. The optional properties\n *have default values in the case that they are not explicitly defined. The position of the\n *player is kept via the position property, and the player will update the board each time the\n *position changes. The player also has a gameType parameter that is an object that tells what\n *sfx to use.\n*/\nlet Player = function(board, playerNumber=1, width=100, height=25, gameType={sfx: \"normal\"}, name=\"anonymous\", photo=null) {\n    this.playerNumber = playerNumber;\n    this.limits = {\n\tleft: 0,\n\tright: board.width\n    };\n    this.board = board.space;\n    this.gameTypeSfx = gameType.sfx;\n    this.initialWidth = width;\n    this.volumeLevel = 0;\n    this.width = width;\n    this.height = height;\n    this.name = name;\n    this.photo = photo;\n    this.centerPoint = {\n\tx: (this.width/2),\n\ty: (this.height/2)\n    };\n    this.position = {\n\t// This accounts for fillRect using topleft corner when drawing on canvas\n\tx: ((board.width/2) - (this.centerPoint.x)),\n\t// Set the player's y 5 pixel off bottom or top of board depending on if player is\n\t// playerOne or playerTwo (p1 === bottom p2 === top)\n\ty: ((this.playerNumber === 1) ? (board.height - this.height - 5) : 5)\n    };\n    this.collisionCount = 0;\n};\n\nPlayer.prototype.addCollision = function() {\n    this.collisionCount++;\n};\n\nPlayer.prototype.clearCollisionCount = function() {\n    this.collisionCount = 0;\n};\n\n/*\n *moveLeft allows a player to shift their x position to the left (subtract). An optional\n *parameter can be set for the velocity the player can move at, otherwise a default value\n *is set. The player can only move left if it is within the board (limit.left), otherwise\n *the x position is set to limit.left. Keep in mind that position x is in relation to the\n *players top left conner (which accounts for the way canvas handles rectangles)\n*/\nPlayer.prototype.moveLeft = function(velocity=5) {\n    if ((this.position.x - velocity) > this.limits.left) {\n\tthis.position.x -= velocity;\n    } else {\n\tthis.position.x = this.limits.left;\n    }\n};\n\n/*\n *moveRight allows a player to shift their x position to the right(add). An optional\n *parameter can be set for the velocity the player can move at, otherwise a default value\n *is set. The player can only move right if it is within the board (limit.right), otherwise\n *the x position is set to limit.right. Keep in mind that position x is in relation to the\n *players top left conner (which accounts for the way canvas handles rectangles)\n*/\nPlayer.prototype.moveRight = function(velocity=5) {\n    if ((this.position.x + this.width + velocity) < this.limits.right) {\n\tthis.position.x += velocity;\n    } else {\n\tthis.position.x = this.limits.right - this.width;\n    }\n};\n\n/*\n *draw is a method that the player uses to draw itself. It expects a context in which\n *to draw itself on the canvas, and an optional color (default is white). This method\n *would be invoked before each re-paint, rendering cycle.\n */\nPlayer.prototype.draw = function(context, color=\"white\") {\n    context.save();\n    context.fillStyle = color;\n    context.fillRect(this.position.x, this.position.y, this.width, this.height);\n    context.restore();\n};\n\n/*\n *increaseSize is a method that will increase the player's paddle width by a set amount\n *(the initial width of the paddle divided by ten), but no greater than the player's initial\n *size. This method should be called when the player scores a point on their opponent.\n*/\nPlayer.prototype.increaseSize = function() {\n    let growth = this.initialWidth/20;\n    if (this.width + growth <= this.initialWidth) {\n\tthis.width += growth;\n    } else {\n\tthis.width = this.initialWidth;\n    }\n};\n\n/*\n *decreaseSize is a method that will decrease the player's paddle width by a set amount\n *(the initial width of the paddle divided by ten). If the size is less than or equal to\n *zero, then the size will just be set to zero.\n */\nPlayer.prototype.decreaseSize = function() {\n    let shrink = this.initialWidth/10;\n    if (this.width - shrink <= 0) {\n\tthis.width = 0;\n    } else {\n\tthis.width -= shrink;\n    }\n};\n\n/*\n *jumpLeft is a method that enables the player to immediately jump to the left side\n *of the board.(aka limits.left)\n */\nPlayer.prototype.jumpLeft = function() {\n    this.position.x = this.limits.left;\n};\n\n/*\n *jumpRight is a method that enables the player to immediately jump to the right side of the\n *board (aka limits.right)\n */\nPlayer.prototype.jumpRight = function() {\n    this.position.x = this.limits.right - this.width;\n};\n\n/*\n *generateGruntSfx is a method that generates an array of the file names of the audio source files\n *for the tennis grunt sound effects (currently 14 tracks), and appends the array to the Player\n *instance. A new Audio() is instantiated for each sfx and placed in Player.sounds for reuse.\n */\nPlayer.prototype.generateGruntSfx = function() {\n    this.sounds = [];\n    if (this.gameTypeSfx === \"normal\") {\n\tlet fileDir = \"/assets/racket/\";\n\tfor (let track = 1; track <= 10; track++) {\n\t    let playerSfx = fileDir + track + \".mp3\";\n\t    this.sounds.push(new Audio(playerSfx));\n\t}\n    } else if (this.gameTypeSfx === \"grunt\") {\n\tlet fileDir = \"/assets/tennis_grunts/\";\n\tfor (let track = 1; track <= 15; track++) {\n\t    let playerSfx = fileDir + track + \".mp3\";\n\t    this.sounds.push(new Audio(playerSfx));\n\t}\n    } else if (this.gameTypeSfx === \"classic\") {\n\tlet playerSfx = new Audio(`/assets/classic/paddel.mp3`);\n\tthis.sounds.push(playerSfx);\n    } else if (this.gameTypeSfx === \"chromatic\") {\n\tlet playerSfx1 = new Audio(`/assets/digital/paddel_1.mp3`);\n\tlet playerSfx2 = new Audio(`/assets/digital/paddel_2.mp3`);\n\tthis.sounds.push(playerSfx1);\n\tthis.sounds.push(playerSfx2);\n    }\n};\n\n/*\n *gruntSfx is a method on the Player constructor that selects a random tennis grunt audio src from\n *the sounds array  and plays the audio sample through the browser Audio api. This is meant\n *for when a player makes contact with the ball.\n */\nPlayer.prototype.gruntSfx = function() {\n    let randomGrunt = Math.floor(Math.random()*this.sounds.length);\n    let randomGruntSrc = this.sounds[randomGrunt];\n    // This ensures the audio api doesn't crash (if volume > 1)\n    this.volumeLevel += (this.volumeLevel < 1) ? 0.5 : 0;\n    randomGruntSrc.volume = this.volumeLevel;\n    randomGruntSrc.play();\n    // Increment collision count\n    this.addCollision();\n};\n\n/*\n *The Ball constructor has a four parameters passed in a width, height, and velocity, which\n *default to values if not explicitly defined, along with a board object that is required.\n *The position of the ball is kept in the position property and the ball should update the\n *board anytime the position is changed.\n *The ball uses the board to also find out the gameType sfx to determine the color of the\n *ball if necessary (chromatic mode, classic mode, etc)\n*/\nlet Ball = function(board, width=15, height=15, velocityX=5, velocityY=5) {\n    this.limits = {\n\ttop: {\n\t    start: {\n\t\tx: 0,\n\t\ty: 0\n\t    }, end: {\n\t\tx: board.width,\n\t\ty: 0\n\t    }\n\t},\n\tbottom: {\n\t    start: {\n\t\tx: 0,\n\t\ty: board.height\n\t    }, end: {\n\t\tx: board.width,\n\t\ty: board.height\n\t    }\n\t},\n\tleft: {\n\t    start: {\n\t\tx: 0,\n\t\ty: 0\n\t    }, end: {\n\t\tx: 0,\n\t\ty: board.height\n\t    }\n\t},\n\tright: {\n\t    start: {\n\t\tx: board.width,\n\t\ty: 0\n\t    }, end: {\n\t\tx: board.width,\n\t\ty: board.height\n\t    }\n\t}\n    };\n    this.width = width;\n    this.height = height;\n    this.board = board.space;\n    this.velocity = {\n\tx: velocityX,\n\ty: velocityY\n    };\n    this.position = {\n\tx: board.width/2,\n\ty: board.height/2\n    };\n    this.gameType = board.gameTypeSfx;\n    this.currentColor = 0;\n    if (this.gameType === \"chromatic\") {\n\tthis.colors = [\"#ffc26b\", \"#ff796b\", \"#5991c2\", \"#59d574\"];\n    } else if (this.gameType === \"classic\") {\n\tthis.colors = [\"white\"];\n    } else {\n\tthis.colors = [\"#f8f32b\"];\n    }\n};\n\n/*\n *ball.intersect is a method that, provided two lines in the form:\n *    {start: {x: ?, y: ? }, end: {x: ?, y: ? }}\n *, will output the point at which the two lines intersect (or false if lines are parallel).\n *The method returns the output in the form of an object: {x: ?, y: ?}\n *It needs to be kept in mind that this method assumes that the lines are infinite and not segments,\n *so further checks should be made to determine an actual collision has occured between two objects.\n */\nBall.prototype.intersect = function(lineOne, lineTwo) {\n    let x1 = lineOne.start.x;\n    let y1 = lineOne.start.y;\n    let x2 = lineOne.end.x;\n    let y2 = lineOne.end.y;\n    let x3 = lineTwo.start.x;\n    let y3 = lineTwo.start.y;\n    let x4 = lineTwo.end.x;\n    let y4 = lineTwo.end.y;\n\n    let pxTop = (x1*y2 - y1*x2)*(x3 - x4) - (x1 - x2)*(x3*y4 - y3*x4);\n    let pxBottom = (x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4);\n    let px = pxTop/pxBottom;\n\n    let pyTop = (x1*y2 - y1*x2)*(y3 - y4) - (y1 - y2)*(x3*y4 - y3*x4);\n    let pyBottom = (x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4);\n    let py = pyTop/pyBottom;\n\n    let intersection;\n\n    if (isFinite(px) && isFinite(py)) {\n\tintersection = {\n\t    x: px,\n\t    y: py\n\t};\n    } else {\n\tintersection = false;\n    }\n\n    return intersection;\n};\n\n/*\n  *moveBtmRtCorner is a helper method to the Ball.protoype.move() method that runs through the\n  *collision cases for the bottom right corner of the Board. It uses the bottom\n  *two corners of the ball, playerOnes top line, the limit right, and the limit\n  *bottom of the board to either set the ball to a collision point, return an object\n  *specifying to remove the ball from the board (and increment playerTwo point),\n  *or simply just move the ball to its destination (no collision occurred).\n  *This method needs the board passed in as a parameter so that it can access the\n  *board's bounce sfx (keep in mind that the Ball.board refers to Board.space)\n*/\nBall.prototype.moveBtmRtCorner = function(board) {\n  let projectileVectorA, projectileVectorB;\n  let ballBottomLeftCorner = {x: this.position.x, y: (this.position.y + this.height)};\n  let ballBottomRightCorner = {x: (this.position.x + this.width), y: (this.position.y + this.height)};\n  // p1 (top line)\n  let p1 = {\n    start: {\n        x: this.board.playerOne.position.x,\n        y: this.board.playerOne.position.y\n    }, end: {\n        x: (this.board.playerOne.position.x + this.board.playerOne.width),\n        y: this.board.playerOne.position.y\n    }\n  };\n  projectileVectorA = {\n      start: ballBottomRightCorner,\n      end: {\n        x: (ballBottomRightCorner.x + this.velocity.x),\n        y: (ballBottomRightCorner.y + this.velocity.y)\n      }\n  };\n  projectileVectorB = {\n      start: ballBottomLeftCorner,\n      end: {\n        x: (ballBottomLeftCorner.x + this.velocity.x),\n        y: (ballBottomLeftCorner.y + this.velocity.y)\n      }\n  };\n  let p1IntersectionA = this.intersect(projectileVectorA, p1);\n\tlet p1IntersectionB = this.intersect(projectileVectorB, p1);\n\tlet limitRightIntersectionA = this.intersect(projectileVectorA, this.limits.right);\n\t// handle case for direct collision with bottom right corner (wall and player)\n\tif ((p1IntersectionA && limitRightIntersectionA) && (projectileVectorA.end.x >= this.limits.right.end.x && projectileVectorA.end.y >= p1.end.y) && (p1IntersectionA.x === limitRightIntersectionA.x && p1IntersectionA.y === limitRightIntersectionA.y)) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitRightIntersectionA.x - this.width);\n\t    this.position.y = (limitRightIntersectionA.y - this.height);\n\t    //invert both x and y velocity\n\t    this.velocity.x *= -1;\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with player 1 only (check for both btmR & btmL ball corners\n\telse if (p1IntersectionA && projectileVectorA.end.y >= p1.end.y && p1IntersectionA.x <= p1.end.x && p1IntersectionA.x >= p1.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p1IntersectionA.x - this.width);\n\t    this.position.y = (p1IntersectionA.y - this.height);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\telse if (p1IntersectionB && projectileVectorB.end.y >= p1.end.y && p1IntersectionB.x <= p1.end.x && p1IntersectionB.x >= p1.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = p1IntersectionB.x;\n\t    this.position.y = (p1IntersectionB.y - this.height);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with limit right only\n\telse if (limitRightIntersectionA && projectileVectorA.end.x >= this.limits.right.start.x) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitRightIntersectionA.x - this.width);\n\t    this.position.y = (limitRightIntersectionA.y - this.height);\n\t    // invert only the x velocity\n\t    this.velocity.x *= -1;\n\t    // bounce sfx\n\t    board.bounceSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for bottom limit collision (both btmR & btmL corners)\n\telse if (projectileVectorA.end.y >= this.limits.bottom.end.y || projectileVectorB.end.y >= this.limits.bottom.end.y) {\n\t    // add point for p2\n\t    // remove this ball\n\t    return {\n\t\tremove: true,\n\t\tplayerPoint: \"playerTwo\"\n\t    };\n\t}\n\n\t// otherwise just move the position of the ball\n\telse {\n\t    this.position.x += this.velocity.x;\n\t    this.position.y += this.velocity.y;\n\t}\n};\n\n\n /*\n  *moveTopRtCorner is a helper method to the Ball.protoype.move() method that runs through the\n  *collision cases for the top right corner of the Board. It uses the top\n  *two corners of the ball, playerTwos bottom line, the limit right, and the limit\n  *top of the board to either set the ball to a collision point, return an object\n  *specifying to remove the ball from the board (and increment playerOne point),\n  *or simply just move the ball to its destination (no collision occurred).\n  *This method needs the board passed in as a parameter so that it can access the\n  *board's bounce sfx (keep in mind that the Ball.board refers to Board.space)\n*/\nBall.prototype.moveTopRtCorner = function(board) {\n  let projectileVectorA, projectileVectorB;\n  let ballTopLeftCorner = {x: this.position.x, y: this.position.y};\n  let ballTopRightCorner = {x: (this.position.x + this.width), y: this.position.y};\n  // p2 (bottom line)\n  let p2 = {\n    start: {\n        x: this.board.playerTwo.position.x,\n        y: (this.board.playerTwo.position.y + this.board.playerTwo.height)\n    }, end: {\n        x: (this.board.playerTwo.position.x + this.board.playerTwo.width),\n        y: (this.board.playerTwo.position.y + this.board.playerTwo.height)\n    }\n  };\n  projectileVectorA = {\n\t    start: ballTopRightCorner,\n\t    end: {\n\t\tx: (ballTopRightCorner.x + this.velocity.x),\n\t\ty: (ballTopRightCorner.y + this.velocity.y)\n\t    }\n\t};\n\tprojectileVectorB = {\n\t    start: ballTopLeftCorner,\n\t    end: {\n\t\tx: (ballTopLeftCorner.x + this.velocity.x),\n\t\ty: (ballTopLeftCorner.y + this.velocity.y)\n\t    }\n\t};\n\n\tlet p2IntersectionA = this.intersect(projectileVectorA, p2);\n\tlet p2IntersectionB = this.intersect(projectileVectorB, p2);\n\tlet limitRightIntersectionA = this.intersect(projectileVectorA, this.limits.right);\n\n\t// handle case for direct collision with top right corner (wall and player)\n\tif ((p2IntersectionA && limitRightIntersectionA) && (projectileVectorA.end.x >= this.limits.right.end.x && projectileVectorA.end.y <= p2.end.y) && (p2IntersectionA.x === limitRightIntersectionA.x && p2IntersectionA.y === limitRightIntersectionA.y)) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitRightIntersectionA.x - this.width);\n\t    this.position.y = (limitRightIntersectionA.y);\n\t    //invert both x and y velocity\n\t    this.velocity.x *= -1;\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with player 1 only (check for both btmR & btmL ball corners\n\tif (p2IntersectionA && projectileVectorA.end.y <= p2.end.y && p2IntersectionA.x <= p2.end.x && p2IntersectionA.x >= p2.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p2IntersectionA.x - this.width);\n\t    this.position.y = (p2IntersectionA.y);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\telse if (p2IntersectionB && projectileVectorB.end.y <= p2.end.y && p2IntersectionB.x <= p2.end.x && p2IntersectionB.x >= p2.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = p2IntersectionB.x;\n\t    this.position.y = p2IntersectionB.y;\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with limit right only\n\telse if (limitRightIntersectionA && projectileVectorA.end.x >= this.limits.right.start.x) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitRightIntersectionA.x - this.width);\n\t    this.position.y = (limitRightIntersectionA.y);\n\t    // invert only the x velocity\n\t    this.velocity.x *= -1;\n\t    // ball bounce sfx\n\t    board.bounceSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for top limit collision (both topR & topL corners)\n\telse if (projectileVectorA.end.y <= this.limits.top.end.y || projectileVectorB.end.y <= this.limits.top.end.y) {\n\t    // add point for p1\n\t    // remove this ball\n\t    return {\n\t\tremove: true,\n\t\tplayerPoint: \"playerOne\"\n\t    };\n\t}\n\n\t// otherwise just move the position of the ball\n\telse {\n\t    this.position.x += this.velocity.x;\n\t    this.position.y += this.velocity.y;\n\t}\n};\n\n /*\n  *moveBtmLtCorner is a helper method to the Ball.protoype.move() method that runs through the\n  *collision cases for the bottom left corner of the Board. It uses the bottom\n  *two corners of the ball, playerOnes top line, the limit left, and the limit\n  *bottom of the board to either set the ball to a collision point, return an object\n  *specifying to remove the ball from the board (and increment playerTwo point),\n  *or simply just move the ball to its destination (no collision occurred).\n  *This method needs the board passed in as a parameter so that it can access the\n  *board's bounce sfx (keep in mind that the Ball.board refers to Board.space)\n*/\nBall.prototype.moveBtmLtCorner = function(board) {\n  let projectileVectorA, projectileVectorB;\n  let ballBottomLeftCorner = {x: this.position.x, y: (this.position.y + this.height)};\n  let ballBottomRightCorner = {x: (this.position.x + this.width), y: (this.position.y + this.height)};\n  // p1 (top line)\n  let p1 = {\n    start: {\n        x: this.board.playerOne.position.x,\n        y: this.board.playerOne.position.y\n    }, end: {\n        x: (this.board.playerOne.position.x + this.board.playerOne.width),\n        y: this.board.playerOne.position.y\n    }\n  };\n  projectileVectorA = {\n\t    start: ballBottomLeftCorner,\n\t    end: {\n\t\tx: (ballBottomLeftCorner.x + this.velocity.x),\n\t\ty: (ballBottomLeftCorner.y + this.velocity.y)\n\t    }\n\t};\n\tprojectileVectorB = {\n\t    start: ballBottomRightCorner,\n\t    end: {\n\t\tx: (ballBottomRightCorner.x + this.velocity.x),\n\t\ty: (ballBottomRightCorner.y + this.velocity.y)\n\t    }\n\t};\n\n\tlet p1IntersectionA = this.intersect(projectileVectorA, p1);\n\tlet p1IntersectionB = this.intersect(projectileVectorB, p1);\n\tlet limitLeftIntersectionA = this.intersect(projectileVectorA, this.limits.left);\n\n\t// handle case for direct collision with bottom left corner (wall and player)\n\tif ((p1IntersectionA && limitLeftIntersectionA) && (projectileVectorA.end.x <= this.limits.left.end.x && projectileVectorA.end.y >= p1.end.y) && (p1IntersectionA.x === limitLeftIntersectionA.x && p1IntersectionA.y === limitLeftIntersectionA.y)) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitLeftIntersectionA.x);\n\t    this.position.y = (limitLeftIntersectionA.y - this.height);\n\t    //invert both x and y velocity\n\t    this.velocity.x *= -1;\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with player 1 only (check for both btmL & btmR ball corners\n\tif (p1IntersectionA && projectileVectorA.end.y >= p1.end.y && p1IntersectionA.x <= p1.end.x && p1IntersectionA.x >= p1.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p1IntersectionA.x);\n\t    this.position.y = (p1IntersectionA.y - this.height);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\telse if (p1IntersectionB && projectileVectorB.end.y >= p1.end.y && p1IntersectionB.x <= p1.end.x && p1IntersectionB.x >= p1.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p1IntersectionB.x - this.width);\n\t    this.position.y = (p1IntersectionB.y - this.height);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p1Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p1 sfx\n\t    this.board.playerOne.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with limit left only\n\telse if (limitLeftIntersectionA && projectileVectorA.end.x <= this.limits.left.start.x) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitLeftIntersectionA.x);\n\t    this.position.y = (limitLeftIntersectionA.y - this.height);\n\t    // invert only the x velocity\n\t    this.velocity.x *= -1;\n\t    // ball bounce sfx\n\t    board.bounceSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for bottom limit collision (both btmL & btmR corners)\n\telse if (projectileVectorA.end.y >= this.limits.bottom.end.y || projectileVectorB.end.y >= this.limits.bottom.end.y) {\n\t    // add point for p2\n\t    // remove this ball\n\t    return {\n\t\tremove: true,\n\t\tplayerPoint: \"playerTwo\"\n\t    };\n\t}\n\n\t// otherwise just move the position of the ball\n\telse {\n\t    this.position.x += this.velocity.x;\n\t    this.position.y += this.velocity.y;\n\t}\n\n};\n\n /*\n  *moveTopLtCorner is a helper method to the Ball.protoype.move() method that runs through the\n  *collision cases for the top left corner of the Board. It uses the top\n  *two corners of the ball, playerTwos bottom line, the limit left, and the limit\n  *top of the board to either set the ball to a collision point, return an object\n  *specifying to remove the ball from the board (and increment playerOne point),\n  *or simply just move the ball to its destination (no collision occurred).\n  *This method needs the board passed in as a parameter so that it can access the\n  *board's bounce sfx (keep in mind that the Ball.board refers to Board.space)\n*/\nBall.prototype.moveTopLtCorner = function(board) {\n  let projectileVectorA, projectileVectorB;\n  let ballTopLeftCorner = {x: this.position.x, y: this.position.y};\n  let ballTopRightCorner = {x: (this.position.x + this.width), y: this.position.y};\n  // p2 (bottom line)\n  let p2 = {\n    start: {\n        x: this.board.playerTwo.position.x,\n        y: (this.board.playerTwo.position.y + this.board.playerTwo.height)\n    }, end: {\n        x: (this.board.playerTwo.position.x + this.board.playerTwo.width),\n        y: (this.board.playerTwo.position.y + this.board.playerTwo.height)\n    }\n  };\n  projectileVectorA = {\n\t    start: ballTopLeftCorner,\n\t    end: {\n\t\tx: (ballTopLeftCorner.x + this.velocity.x),\n\t\ty: (ballTopLeftCorner.y + this.velocity.y)\n\t    }\n\t};\n\tprojectileVectorB = {\n\t    start: ballTopRightCorner,\n\t    end: {\n\t\tx: (ballTopRightCorner.x + this.velocity.x),\n\t\ty: (ballTopRightCorner.y + this.velocity.y)\n\t    }\n\t};\n\n\tlet p2IntersectionA = this.intersect(projectileVectorA, p2);\n\tlet p2IntersectionB = this.intersect(projectileVectorB, p2);\n\tlet limitLeftIntersectionA = this.intersect(projectileVectorA, this.limits.left);\n\n\t// handle case for direct collision with top right corner (wall and player)\n\tif ((p2IntersectionA && limitLeftIntersectionA) && (projectileVectorA.end.x <= this.limits.left.end.x && projectileVectorA.end.y <= p2.end.y) && (p2IntersectionA.x === limitLeftIntersectionA.x && p2IntersectionA.y === limitLeftIntersectionA.y)) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitLeftIntersectionA.x);\n\t    this.position.y = (limitLeftIntersectionA.y);\n\t    //invert both x and y velocity\n\t    this.velocity.x *= -1;\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with player 2 only (check for both topL & topR ball corners\n\tif (p2IntersectionA && projectileVectorA.end.y <= p2.end.y && p2IntersectionA.x <= p2.end.x && p2IntersectionA.x >= p2.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p2IntersectionA.x);\n\t    this.position.y = (p2IntersectionA.y);\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t}\n\telse if (p2IntersectionB && projectileVectorB.end.y <= p2.end.y && p2IntersectionB.x <= p2.end.x && p2IntersectionB.x >= p2.start.x) {\n\t// move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (p2IntersectionB.x - this.width);\n\t    this.position.y = p2IntersectionB.y;\n\t    // invert only the y velocity\n\t    this.velocity.y *= -1;\n\t    if (keyEvent.p2Backhand) {\n\t\tthis.backspin();\n\t    }\n\t    // increase ball's velocity\n\t    this.increaseVelocity();\n\t    // p2 sfx\n\t    this.board.playerTwo.gruntSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for collision with limit left only\n\telse if (limitLeftIntersectionA && projectileVectorA.end.x <= this.limits.left.start.x) {\n\t    // move ball directly at collision point (adjusting position to top left corner (canvas)\n\t    this.position.x = (limitLeftIntersectionA.x);\n\t    this.position.y = (limitLeftIntersectionA.y);\n\t    // invert only the x velocity\n\t    this.velocity.x *= -1;\n\t    // ball bounce sfx\n\t    board.bounceSfx();\n\t    // Shift current Color if chromatic\n\t    if (this.gameType === \"chromatic\") {\n\t\tthis.currentColor = (this.currentColor < this.colors.length-1) ? this.currentColor + 1 : 0;\n\t    }\n\t}\n\n\t// handle case for top limit collision (both topL & topR corners)\n\telse if (projectileVectorA.end.y <= this.limits.top.end.y || projectileVectorB.end.y <= this.limits.top.end.y) {\n\t    // add point for p1\n\t    // remove this ball\n\t    return {\n\t\tremove: true,\n\t\tplayerPoint: \"playerOne\"\n\t    };\n\t}\n\n\t// otherwise just move the position of the ball\n\telse {\n\t    this.position.x += this.velocity.x;\n\t    this.position.y += this.velocity.y;\n\t}\n};\n\n /*\n  *move uses helper methods to help the ball figure out how it should move through\n  *space. The method determines which helper to call based on the velocity and\n  *direction in which the ball is moving, returning the result of the helper method,\n  *which will either be undefined or an object determining if a player should recieve\n  *a point and if the ball should be removed. If none of the helper methods is called\n  *an error will be thrown because that means either the x or y velocity is zero. (illegal).\n  *The move method needs the board passed in as a parameter so that it can access the\n  *board's bounce sfx (keep in mind that the Ball.board refers to Board.space)\n*/\nBall.prototype.move = function(board) {\n    if (this.velocity.x > 0 && this.velocity.y > 0) {\n      return this.moveBtmRtCorner(board);\n    } else if (this.velocity.x > 0 && this.velocity.y < 0) {\n      return this.moveTopRtCorner(board);\n    } else if (this.velocity.x < 0 && this.velocity.y > 0) {\n      return this.moveBtmLtCorner(board);\n    } else if (this.velocity.x < 0 && this.velocity.y < 0) {\n      return this.moveTopLtCorner(board);\n    } else {\n\t    // Throw an error because velocity.x or velocity.y should never equal zero...\n\t    throw new Error(\"Ball has illegal velocity: x: \" + this.velocity.x + \", y: \" + this.velocity.y);\n    }\n};\n\n/*\n *draw() is much of the same as with the Player.prototype, however it uses the\n *properties of the ball to draw the ball on the canvas. A context needs to be passed\n *into the method in order to allow for the shape to be filled properly on the right\n *canvas.\n*/\nBall.prototype.draw = function(context) {\n    context.fillStyle = this.colors[this.currentColor];\n    context.fillRect(this.position.x, this.position.y, this.width, this.height);\n\n};\n\n\n/*\n *increase velocity is a method that increases the velocity of the ball in whichever\n *direction it is currently going by a set amount (default parameter=0.25). It is meant\n *to be used after each successive contact with a player's paddle during a rally.\n */\nBall.prototype.increaseVelocity = function(increment=0.25) {\n    this.velocity.x += (this.velocity.x < 0) ? -1*increment : increment;\n    this.velocity.y += (this.velocity.y < 0) ? -1*increment : increment;\n};\n\n/*\n *backspin is a maneuver that a player can pull to invert the velocity along\n *the x-axis upon making contact with the ball.\n */\nBall.prototype.backspin = function() {\n    this.velocity.x *= -1;\n};\n\n\n/*============= Game Jumpstart Code Below =============*/\n// Board = function(width=400, height=600) {\n// let pongBoard = new Board();\n// // Player = function(board, playerNumber, width=100, height=25, name=\"anonymous\", photo=null) {\n// let firstPlayer = new Player(pongBoard, 1, 100, 5);\n// // Player = function(board, playerNumber, width=100, height=25, name=\"anonymous\", photo=null) {\n// let secondPlayer = new Player(pongBoard, 2, 100, 5);\n// // Ball = function(board, width=15, height=15, velocityX=5, velocityY=5) {\n// let pongBall = new Ball(pongBoard, 5, 5, 4, 4);\n// // Game = function(playerA, playerB, mainBall) {\n// let pongGame = new Game(firstPlayer, secondPlayer, pongBall);\n// // Initialize the board\n// pongGame.initialize(pongBoard);\n\n\n//module.exports = {\n    //Game: Game,\n    //Player: Player,\n    //Ball: Ball,\n    //Board: Board\n//};\nfunction init() {\n  let menuExit = 0;\n  window.addEventListener(\"keydown\", function() {\n      if (event.keyCode == \"32\" && menuExit === 0) {\n\t// Show first menu\n\tevent.preventDefault();\n\tlet controls = document.getElementById(\"controls\");\n\tcontrols.style.display = \"none\";\n\t// Append new menu for mode selection\n\tsetupMenu2();\n\tmenuExit++;\n      } else if (event.keyCode == \"32\" && menuExit === 1) {\n\t  // Show second menu\n\t  let gameSettings;\n\t  let tennisMode = document.getElementById(\"tennis\");\n\t  let classicMode = document.getElementById(\"classic\");\n\t  let chromaticMode = document.getElementById(\"chromatic\");\n\t  if (tennisMode.checked) {\n\t      let sfx;\n\t      let normalSfx = document.getElementById(\"normal\");\n\t      let gruntSfx = document.getElementById(\"grunt\");\n\t      if (normalSfx.checked) {\n\t\tsfx = \"normal\";\n\t      } else if (gruntSfx.checked) {\n\t\tsfx = \"grunt\";\n\t      }\n\t      let courtSelect = document.getElementById(\"court-select\");\n\t      let courtValue = courtSelect.options[courtSelect.selectedIndex].value;\n\t      gameSettings = {\n\t\tmode: \"tennis\",\n\t\tsfx: sfx,\n\t\tcourt: courtValue\n\t      };\n\t  } else if (classicMode.checked) {\n\t      gameSettings = {\n\t\tmode: \"classic\",\n\t\tsfx: \"classic\",\n\t\tcourt: \"classic\"\n\t      };\n\t  } else if (chromaticMode.checked) {\n\t      gameSettings = {\n\t\tmode: \"chromatic\",\n\t\tsfx: \"chromatic\",\n\t\tcourt: \"chromatic\"\n\t      };\n\t  }\n\n\t  let container = document.getElementById(\"container\");\n\t  container.innerHTML = \"\";\n\t  /*============= Game Jumpstart Code Below =============*/\n\t  let pongBoard = new Board(400, 600, gameSettings);\n\t  let firstPlayer = new Player(pongBoard, 1, 100, 5, gameSettings);\n\t  let secondPlayer = new Player(pongBoard, 2, 100, 5, gameSettings);\n\t  let pongBall = new Ball(pongBoard, 5, 5, 4, 4);\n\t  let pongGame = new Game(firstPlayer, secondPlayer, pongBall, gameSettings);\n\t  pongGame.sounds.start.play();\n\t  pongGame.initialize(pongBoard);\n\t// Set menuExit to true (making the code above not run again)\n\tmenuExit++;\n      }\n  });\n}\ninit();\n"]}